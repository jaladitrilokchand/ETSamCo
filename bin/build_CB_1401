#!/usr/bin/env ksh

#========================================================================================================
# Program Name: build_CB_1401
#
# Author(s)   : A. Magnan
#
# Purpose     : Performs extraction/build on Chipbench related components.
#
# Notes       : (1) The input is a component/release pair (e.g. model.1401)
#               (2) svnExtract used for extraction, simp_build for builds
#
# Revisions   : 0.0 05/13/11 AM Initial version
#               0.1 06/03/11 AM Added code to auto-generate overnight build metric 
#                               information into the Chipbench metric file.
#                               Added -m switch to generate manual build metric info
#                               into the Chipbench metric file.
#               0.2 06/13/11 AM Added time information
#                               Added file logging to BUILDLOG
#                               Added -N switch to bypass svnExtract
#               0.3 06/15/11 AM Clear the no.extract file if -N switch used.
#               0.4 06/16/11 AM Added code to get AFS tokens for HDPLIB; needed for cron
#                               if svnExtract is not run.
#               0.5 02/06/13 NRS Added code to automate gcov, beam and lint builds.
#               0.6 02/06/13 NRS Added code to validate build and promote from build to dev.
#========================================================================================================
function help
{

cat << \EOF
# Usage    : build_CB_1401 -r <comp.rlse> [-h]
#
#      BUILDER OPTIONS:
#            -h  shows this help
#            -m  Manual build (default: auto)
#            -r  <comp.rlse>    
#                   (e.g. model.1401)
#            -e  List of E-mail IDs separated by spaces, to which notifications are to be sent.
#                   (By default, the notifications are sent to hdplib@us.ibm.com)
#            -N  do not run svnExtract (so no extraction performed)
#                     
EOF
}

function goodbye
{
  [[ -n $ENTIRE ]] && print "\n$SHELL_NAME: $EXT_RLSE ending at $(date +"%a %D %T") on $(hostname -s)" >> $CB_BUILDLOG
  rc="$1"
  [[ -n $2 ]] && print "$2" >> $CB_BUILDLOG
  exit "${rc:-0}"
}

function parse_rel 
{
  # Variables:
  # ----------
  # INPUT:
  # RELEASE      =  release.ver  (release name)
  # OUTPUT:
  # PRODUCT      =  release name in lowercase, ie. 'einstimer'
  # REL_VER      =  release version, leading zeros ie., 0901 or 1401
  # R_V          =  release version, dot version ie., 14.1

  typeset RELEASE=$1

  PRODUCT=$(print $RELEASE | cut -f1 -d. )
  LOG_VER=$(print $RELEASE | cut -f2 -d.)

  REL_VER=$(print $RELEASE | cut -f2 -d.)
  [[ $REL_VER = +([0-9])-[0-9]* ]] && RV_EXT=-$(print $REL_VER | cut -d- -f2-) || RV_EXT=
  R_V="$(print $REL_VER | cut -c1,2 | sed 's/^0//').$(print $REL_VER | cut -c3,4 | sed 's/^0//')$RV_EXT"
}

function createFileHeader 
{
  print "#" > $metricLog
  print "# ChipBench Build Metric Definition" >> $metricLog
  print "# This semi-colon delimited file is used to record Chipbench 14.1" >> $metricLog
  print "# build metrics generated by running the build flow script, build_CM_1401." >> $metricLog
  print "# It is the data basis for generation of the monthly ChipBench metric charts." >> $metricLog
  print "#" >> $metricLog
  print "# Fields: ExtractDate;BuildDate;Component;Release;TK Version;NumTrksBuilt;BuildMode;BuildType;BuildStatus;BuildFailSig;RegTestStatus;RegTestFailSig" >> $metricLog
  print "#" >> $metricLog
  print "# Field Description:" >> $metricLog
  print "#   Field 01    ExtractDate     (format: mm/dd/yy)" >> $metricLog
  print "#   Field 02    BuildDate       (format: mm/dd/yy)" >> $metricLog
  print "#   Field 03    Component       (e.g. hdp)" >> $metricLog
  print "#   Field 04    Release         (format: rr.v; e.g. 13.1, 12.1)" >> $metricLog
  print "#   Field 05    TK version      (format: 17.1.n)" >> $metricLog
  print "#   Field 06    NumTrksBuilt    (Number of tracks built; integer)" >> $metricLog
  print "#   Field 07    BuildMode       (format: nightly | injection)" >> $metricLog
  print "#   Field 08    BuildType       (format: auto | manual)" >> $metricLog
  print "#   Field 09    BuildStatus     (format: pass | fail)" >> $metricLog
  print "#   Field 10    BuildFailSig    (format: none | {text comment})" >> $metricLog
  print "#   Field 11    RegTestStatus   (format: none | pass | fail)" >> $metricLog
  print "#   Field 12    RegTestFailSig  (format: none | {text comment})" >> $metricLog
  print "#" >> $metricLog
}

function createMetric 
{
  # If new metric file, generate file header
  if [[ ! -f $metricLog ]]
  then
    createFileHeader
  fi

	# Add entry for this overnight run
  print "${xtractDate};${buildDate};$PRODUCT;$R_V;${tkVersion};${numRevs};${buildMode};${buildType};${buildStatus};${buildFailSig};${regTestStatus};${regTestFailSig}" >> $metricLog
}
#========================================================================================
#                                  MAIN CODE
#========================================================================================
bldStatusPath="/afs/eda/u/$USER/bin"
tkVersion="14.1.0"
rc=0

# Initialize build metric field variables
numRevs="1"
buildMode="nightly"
buildType="auto"
buildStatus="fail"
buildFailSig="{tbd}"
regTestStatus="none"
regTestFailSig="none"

# Get program input parameters
unset DEBUG RELEASE
EMAIL=hdplib@us.ibm.com
# Parse args
while getopts :hmr:e:NT OPTION
do
  case "$OPTION" in
		h) help; goodbye 1;;
    m) buildType="manual";;
    r) RELEASE=$OPTARG;;
    e) EMAIL="hdplib@us.ibm.com $OPTARG";;
    N) NOEXTRACT=TRUE;;
    T) DEBUG=TRUE;;
    :) help; goodbye 1 "\n*** Option -$OPTARG requires a parameter.";;
    ?) help; goodbye 1 "\n*** Option -$OPTARG is not recognized.";;
  esac
done
shift $(($OPTIND - 1))

SCRIPT=$$
SHELL_NAME=${0##*/}
EXT_RLSE=$RELEASE

# Error checking for parameters
[[ -z $RELEASE ]] && { help; goodbye 1 "\n*** No component.release specified."; }

# Get time variables
# DATE         =  current date (adjusted ahead if after 1800 hours)
# DOW          =  day of week
# HOUR         =  current hour
# MONTH        =  current month
integer HOUR=$(date +%H)
typeset -l DATE=$(date +%b%d )
typeset -l MONTH=$(date +%b )
DOW=$(date +%a)
YEAR=$(date +"%Y")

# Use parse_rel function to get PRODUCT name and convert from zero-based release
# version to dot version $R_V (e.g. 1401 -> 14.1)
# parse_rel - parse cmvc release name, must be called with 
# release name in $1

parse_rel $RELEASE

# Define where the build is to happen (component treetop)
CB_BUILDDIR=/afs/eda/build/$PRODUCT/$R_V

# Define the program log file 
CB_BUILDLOGDIR=/afs/eda/u/$USER/logs/${MONTH}
CB_BUILDLOG=${CB_BUILDLOGDIR}/${DATE}.${PRODUCT}.${REL_VER}.svnBuild

# Define the path of the called programs
scriptPath="/afs/eda/tools/bin"

# Define the build metrics file
metricFile="${MONTH}.${YEAR}.chipbench.${R_V}.build.metrics"
metricLog="/afs/eda/u/$USER/metrics/$metricFile"

# set entire so we get the right goodbye()
ENTIRE=TRUE

# Start the program execution
print "\n$SHELL_NAME: $EXT_RLSE starting at $(date +"%a %D %T") on $(hostname -s) by $USER" >> $CB_BUILDLOG
print "\nOutput will be written to $CB_BUILDLOG.\n" >> $CB_BUILDLOG

# Extract from SVN, but not if overridden with -N switch
xtractDate=$(date +"%m/%d/%y")
if [[ -z $NOEXTRACT ]]
then
  # Extract the source code for the component
  xtractCmd="${scriptPath}/svnExtract -r $RELEASE -O"
  print "\nExtraction command: $xtractCmd\n" >> $CB_BUILDLOG

  $xtractCmd 2>&1 >> $CB_BUILDLOG
  rc=$?
  if (( rc != 0 ))
  then
    print "ERROR: Extraction failed with rc=$rc\n" >> $CB_BUILDLOG
    # Skip the build
    BUILDIT=
  else
    print "INFO: Extraction completed successfully.\n" >> $CB_BUILDLOG
    # Perform the build
    BUILDIT=TRUE
  fi
else
		print "NO EXTRACTION switch (-N) specified...svnExtract will not be run!\n" >> $CB_BUILDLOG
    # Clear the no.extract file
    if [[ -f ${CB_BUILDDIR}/no.extract ]]
    then
      rm ${CB_BUILDDIR}/no.extract
    fi

    # Handle AFS Tokens
    # Get a token so the script can run via cron
    PASS=$(cat /tmp/local/$USER)
    /usr/afsws/bin/klog -pass $PASS
    export KAUTH=afs
    /usr/afsws/bin/tokens >> $BUILDLOG

    # We do want to build
		BUILDIT=TRUE
fi

# Build the component, if needed.
buildDate=$(date +"%m/%d/%y")
# .simp_build file has options set on all components for:
#     noextract, nopostbuild, loadleveler, svnlog
buildCmd="${scriptPath}/simp_build $RELEASE"

if [[ ! -f ${CB_BUILDDIR}/no.extract && -n $BUILDIT ]]
then
  for PLATS in 64-rs_aix61 64-linux50
  do
    # Set the Build Status Web page to "Build Running"
    print "$bldStatusPath/CM_BuildStatus -r $RELEASE -p $PLATS -l build -B" >> $CB_BUILDLOG
  done
	print "\nBuild command: $buildCmd\n" >> $CB_BUILDLOG
  $buildCmd 2>&1 >> $CB_BUILDLOG
  rc=$?
  if (( rc != 0 ))
  then
    print "ERROR: Build failed with rc=$rc\n" >> $CB_BUILDLOG
    buildStatus="fail"
  else
    print "INFO: Build completed successfully.\n" >> $CB_BUILDLOG
    buildStatus="pass"
    buildFailSig="none"

#==============================================================================#
# Modifications by Namitha Reval
#==============================================================================#
JOBS_DIR=/afs/eda/u/$USER/bin/bnr

JOBS_FILE=$JOBS_DIR/submit.on.linux.$PRODUCT

echo "# @ class = 8hour" > $JOBS_FILE
echo "# @ requirements = (OpSys == \"Linux26\")" >> $JOBS_FILE
echo "# @ account_no = EDA" >> $JOBS_FILE
echo "# @ group = enablement" >> $JOBS_FILE
echo "# @ notification = always" >> $JOBS_FILE
echo "# @ notify_user = $EMAIL" >> $JOBS_FILE
echo "# @ executable = $JOBS_DIR/on.linux.ksh" >> $JOBS_FILE
echo "# @ arguments = $PRODUCT $R_V \"$EMAIL\"" >> $JOBS_FILE
echo "# @ output = $JOBS_DIR/submit.linux.out.$PRODUCT" >> $JOBS_FILE
echo "# @ error = $JOBS_DIR/submit.linux.err.$PRODUCT" >> $JOBS_FILE
echo "# @ restart = yes" >> $JOBS_FILE
echo "# @ queue" >> $JOBS_FILE

/home/loadl/releasedir/bin/llsubmit $JOBS_FILE
#==============================================================================#
# Modifications by Namitha Reval
#==============================================================================#

  fi

	# Write the metric file entry
	createMetric

else
	print "No build required." >> $CB_BUILDLOG
fi
goodbye $rc


