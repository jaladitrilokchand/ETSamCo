#!/usr/bin/env perl
#use warnings;
#use strict;
#=============================================================================
#    FILE: update_lc_linktree
#
# CREATOR: Art Magnan
#    DEPT: AZYX
#
# OUTPUTS:
#
# RETURN CODES: 0 = OK
#               8 = error
#
#-PURPOSE---------------------------------------------------------------------
# Update the lifecycle symlinks for components defined in the CM DB. 
#
# The lifecycle symlinks, called 14.1, are made from either the SHIPB, TKB, or 
# XTINCT/TKVERSION component to the corresponding component/14.1 location in the 
# release version tree (/afs/eda/tkrepos/{tkversion}).
#
# This can be run for a single component (-c switch) or for all components.
#
#-CHANGE LOG------------------------------------------------------------------
# 04/11/2011 AM  Initial version
# 04/18/2011 AM  Updated to use the TkCommon Perl module for runcmd.
#                Updated scriptPath to use the main DEV and PROD tool development areas.
#                Updated to check return codes from update_lc_complink.
# 04/19/2011 AM  Improved help section.
# 07/27/2011 AM  Updated to call update_lc_complink with -f and -p switches to
#                support unit testing in DEV mode.
#                Added codePath to select the prefix path of program code location.
#                Defined GDEV as CM DB to use in DEV mode.
# 08/08/2011 AM  Updated to use the external component definition files. Handled by 
#                subroutines added to TkCommon Perl module.
#=============================================================================
#=============================================================================
#			       FUNCTIONS and SUBROUTINES
#=============================================================================
sub help {
        print "\nScript to create lifecycle symlinks for either:\n";
        print "  1) a full Toolkit version tree or\n";
        print "  2) a single component/release tree.\n";
        print "\nUsage:  update_lc_linktree -t <Toolkit version> [-c <component>] -s <source repository>\n";
        print "                            [-d] [-g] [-h] [-O <create|delete>]\n";
        print "\nInput parameters:\n";
				print "  -t <EDA Toolkit version> e.g. 14.1.{n}\n";
        print "  -c <component_name; e.g. einstimer>\n";
				print "  -s <source repository - shipb, tkb, xtinct>\n";
        print "  -d [Development Mode ON]\n";
				print "  -g [Test mode ON - will see what would execute.]\n";
				print "  -h This help\n";
				print "  -O <Op mode; e.g. create, delete>\n";
        print "\nNOTES:\n";
        print "  1) The EDA Toolkit version and source repository are required.\n";
        print "  2) To update symlinks for a single component, use the -c switch.\n";
				print "  3) To update symlinks for all components, do not use the -c switch.\n";
				print "  4) The default Op mode is \"create\".\n";
				print "  5) A full Toolkit version tree contains content for all components defined in CM DB:\n";
				print "         AFS TK Version tree: \"/afs/eda/tkrepos/14.1.{n}/{component}/14.1\"\n";
				print "  6) Lifecycle symlinks are built from the source repositories to the Toolkit version tree as follows:\n";
				print "     a) SHIPB : /afs/eda/shipb/{component} => TK version tree.\n";
				print "     b) TKB   : /afs/eda/tkb/{component}   => TK version tree.\n";
				print "     c) XTINCT: /afs/eda/xtinct/tk{tkVersion}/{component} => TK version tree.\n"; 
        exit 1;
}

sub process_cmd_line {

  # ---------------------------------------------------------------------
  # Description  : This routine processes command line parameters
  # Parms defined:  -c <component_name; e.g. einstimer>
  #                 -d [Development Mode ON - using code from DEV area]
  #                 -g [Test mode ON - will see what would execute.]
  #                 -h [help]
  #                 -s <source repository name; i.e. shipb, tkb, or xtinct>
  #                 -t <Toolkit version;  e.g. 14.1.0>
  #                 -O <Op mode; e.g. create, delete>
  # ---------------------------------------------------------------------
  getopts('c:dghs:t:O:');

  $compName  = "$opt_c";
  $devMode   = "$opt_d";
  $srcRepos  = "$opt_s";
  $tkVersion = "$opt_t";
  $opMode    = "$opt_O";

	# Set DEBUG mode
	if ( ${opt_g} ) {
		$DEBUG = 1;
	}
	else {
		$DEBUG = 0;
	}
	
	if ( ${opt_h} ) { help(); }

  if ($opMode eq "") {
		$opMode = "create";   # set default operation
	}	
}	
#============================================================================================
#					MAIN ROUTINE
#============================================================================================
use Env;
use Getopt::Std;
use lib '/afs/eda/data/edainfra/tools/enablement/dev/libperl';
use TkCommon;

$sysRC = 0;
$compCnt = 0;       # Counts the number of components.
$failCnt = 0;       # Counts the number of components that failed.

$codePath = "/afs/eda/data";      # Top path of script location.
#$codePath = "/afs/eda/u/amagnan";

# Pass target host from command line
process_cmd_line;

# Make sure the required parameters are provided
if ($srcRepos eq "") {
  print "\nERROR: You must specify the EDA source level repository (shipb, tkb, or xtinct).\n\n";
  exit 8;
} elsif ($tkVersion eq "") {
  print "\nERROR: You must specify the EDA Toolkit release version in format 14.1.{n}.\n\n";
  exit 8;
} else {
  if ($devMode) {
		$dbType = "-db GDEV";    # development CM DB on greenjiffy machine
    $devFlg = "-d";
		$srcDataPath = "/afs/eda/u/$USER";
		$tgtDataPath = "/afs/eda/u/$USER";
		$scriptPath = "${codePath}/edainfra/tools/enablement/dev/bin";
	} else {
		$dbType = "-db GPROD";   # production CM DB on greenjiffy machine
    $devFlg = "";
		$srcDataPath = "/afs/eda";
		$tgtDataPath = "/afs/eda";
		$scriptPath = "${codePath}/edainfra/tools/enablement/prod/bin";
	}
}

# Validate certain parameters
if ( !(($srcRepos eq "shipb") || ($srcRepos eq "tkb") || ($srcRepos eq "xtinct")) ) {
	print "\n[ERROR]: Valid values for the -s switch are \"shipb\", \"tkb\", or \"xtinct\"\n";
	exit 8;
}
if ( !(($opMode eq "create") || ($opMode eq "delete")) ) {
	print "\n[ERROR]: Valid values for the -O switch are \"create\" or \"delete\"\n";
	exit 8;
}

if ($srcRepos eq "xtinct") {
  $srcRepos = "$srcRepos/tk$tkVersion";
}

$release = substr($tkVersion,0,4);
if ($DEBUG) {
	print "Release: $release\n";
}

# Determine if this is a full release version tree or single component/release creation
if ($compName eq "") {
  $compMode = "all";
  $modeText = "All defined in TK version";
}  else {
	$compMode = "single";
  $modeText = "$compName";
}

if ($DEBUG) {
  $dbgFlg = "-g";
	print "------------------------------------------------------ \n";
	print " Parms Read By Program:  \n";
	print " $0\n";
	print "------------------------------------------------------ \n";
	print "TK Version     = \"$tkVersion\"\n";
	print "Component(s)   = \"$compMode\" \n";
	print "Component name = \"$modeText\" \n";
	print "Source Repos   = \"$srcRepos\" \n";
	print "Operation mode = \"$opMode\" \n";
	if ($opt_d) { print "DEV Mode       = \"ON\" \n"; }
	else { print "DEV Mode       = \"OFF\" \n"; }
	if ($opt_g) { print "DEBUG Mode     = \"ON\" \n"; }
	else { print "DEBUG Mode     = \"OFF\" \n"; }
	print "------------------------------------------------------ \n\n";
}
else {
  $dbgFlg = "";
}

# Disable buffering of stdout
$|++;

#
# TEMPORARY WORKAROUND until CM DB content is available
# Get list of components from the TK version-specific component definition.
my %compList = ();
my $compDefPath = "/afs/eda/u/svnlib/toolkit/data";
($rc, %compList) = TkCommon::read_compdef_files ($tkVersion, $compDefPath, "both", $DEBUG);
if ($rc != 0) {
	print "ERROR: Unable to get the TK version-specific component definition.\n";
  exit $rc;
}

# Dependent on mode, attempt to update symlinks for a full Toolkit version or a single component/release.
if ($compMode eq "all") {
	
	#
  # RESTORE AFTER CM DB DATA CONTENT AVAILABLE
	#
  # Get the list of components that are defined for this release version
  #$cmdbCmd = "$scriptPath/getComponents -t $tkVersion -q $dbType";
  #$compList = `$cmdbCmd`;
  #chomp ($compList);
  #$sysRC = $? >> 8;
	
	#if ($sysRC) {
		#print "sysRC: $sysRC \n";
		#print "ERROR: Return code $sysRC from $cmdbCmd.\n";
		#exit 8;
	#} else {
		#print "sysRC: $sysRC \n";
		#print "Component list created.\n";
	#	if ($devMode) {
	#		print "Results:\n";
	#		foreach $comp (sort split(/,/, $compList)) {
	#			print "$comp\n";
	#		}
	#	}
	#	}
	# Create symlinks for all defined components
	
	#
  # RESTORE THIS CODE AFTER CM DB DATA CONTENT AVAILABLE
	#
	# foreach $comp (sort split(/,/, $compList)) {
	
	#
	# TEMPORARY WORKAROUND until CM DB content is available
  # Run the operations on all components defined in this TK version.
	# Already got the list of components in a previous step.
  #
	foreach $comp (sort keys %compList) {
		$compCnt++;
		print "\n***** $compCnt) PROCESSING Component $comp *****\n\n";
		
		# Create symlink for each component.
		# The update_lc_complink script validates the component existence in the CM DB.
		$linkCmd = "$scriptPath/update_lc_complink -t $tkVersion -c $comp -f $srcDataPath -p $tgtDataPath -s $srcRepos -O $opMode $devFlg $dbgFlg";
		
		# Execute the command
		TkCommon::runcmd("$linkCmd", "$DEBUG");
		$sysRC = $? >> 8;
		if ($sysRC) {
			print "sysRC: $sysRC \n";
			print "ERROR: Return code $sysRC from $linkCmd.\n";
			$failCnt++;
		} 
		else {		
			print "sysRC: $sysRC \n";
			print "Component symlink command was successful for $linkCmd.\n";
		}	
	}
} elsif ($compMode eq "single") {
	
	# Create symlink for one component
	# The update_lc_complink script validates the component existence in the CM DB.
	$linkCmd = "$scriptPath/update_lc_complink -t $tkVersion -c $compName -f $srcDataPath -p $tgtDataPath -s $srcRepos -O $opMode $devFlg $dbgFlg";
	
	# Execute the command
	TkCommon::runcmd("$linkCmd", "$DEBUG");
	$sysRC = $? >> 8;
	if ($sysRC) {
		print "sysRC: $sysRC \n";
		print "ERROR: Return code $sysRC from $linkCmd.\n";
		$failCnt++;
	} 
	else {		
		print "sysRC: $sysRC \n";
		print "Component symlink command was successful for $linkCmd.\n";
	}
}

if ( $failCnt gt 0 ) {
	$sysRC = 8;
}
exit ($sysRC);
