#!/usr/bin/perl
#
# =============================================================================
#
#    FILE: createTkVols.tkb2ctkb
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Eric Hull
#    DATE: 01/31/2013
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 09/23/2014 GS  Initial coding .. rewrite of createTkVols.ctk
# =============================================================================

use warnings;
use strict;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");
use File::Path;
use File::Copy;

# Global variables
my $BIN                   = "/afs/eda/data/edainfra/tools/enablement/prod/bin";
my $GET_COMP              = "$BIN/getComponents ";
my $LUCI_CMD              = "/afs/eda/projects/luci/bin/luci_cmd";
my $SETUP_DIRS            = "/afs/eda/prod/tools/14.1/bin/setup_dirs";
my $FS_CMD                = "/usr/afsws/bin/fs";
my $afsCellShort          = "eda";
my $afsCellLong           = "eda.fishkill.ibm.com";
my $afsId                 = "svnlib";
my $logDir                = "/afs/eda/data/edainfra/volume_creation";

# Program name
my $appName = "createTkVols.tkb2ctkb";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $help                  = "";
my $verbose               = 0;
my $verbose2              = 0;
my $noCmdExec             = 0;
my $cmdLineArgs           = "";
my $logDate               = "";
my @tokens                = ();
my @results               = ();
my $command               = "";
my $msg                   = "";
my $mountPointDir         = "";
my $rc                    = 8;
my $component             = "";
my $volName               = "";
my %compSpace             = ();
my $luciQuotaMb           = "";
my $tgtQuotaKb            = 5000;
my $defaultLuciQuotaMb    = 5;
my $luciQuotaKb           = "";
my $mountPointExists      = "";
my $toolKit               = "";
my $dbMode                = ""; # default is prod if empty (GS)
my $volNameReposQualifier = "_";
my $permsRefLevel         = "";
my $spaceRefLevel         = "";
my $refDir                = "";
my $tgtDir                = "";
my $hLDirPair             = "";
my $spaceRefDir           = "";
my $release               = "";

# Return codes
my $OK    = 0;
my $ERROR = 8;
my $TRUE  = 1;
my $FALSE = 0;

# Program's global return code - initialize to ERROR
my $progRC  = $ERROR;
my $startDir = $ENV{"PWD"};

#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Deal nicely with unexpected exits
$SIG{'INT'}   = sub { handleInterruption(); };
$SIG{'QUIT'}  = sub { handleInterruption(); };
$SIG{__DIE__} = \&handleDIE;

# Read the command line arguments
$progRC = processArgs();
if ($progRC == $ERROR) {
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}

# Initialize logging
$rc = setupLogging();
if ($rc > 0) {
  CleanExit("ERROR: Unable to complete $appName initalization", $ERROR);
}

# Output line seperator to log file prior to starting component processing
print "\n------------------------------------------------------------------" .
  "--------------\n";

#---------------------------------------------------------------------------
# COMPONENT PROCESSING
#
# Iterate through each component that is defined for specified Tool Kit.
#---------------------------------------------------------------------------

# Get a list of components to be checked
my @components = ();
if ($component) {
  push(@components, $component);
}
else {
  $command = $GET_COMP . " -t $toolKit -q ";
  chomp(@results = `$command`);
  @components = split(/,/, $results[0]);
}

# Iterate through each component in the list
foreach $component (@components) {

  # Ignore test components
  next if $component =~ /etreetest/;
  next if $component =~ /svn_test/;
  next if $component =~ /svntest/;

  # Only proceed if the target component exists in "tkb"
  if (!-e "/afs/eda/tkb/$component/14.1") {
    print "Component $component does not exist in reference location tkb. ".
      "It will not be processed\n";
    next;
  }
  print "\nBeginning processing for component $component\n";

  # Create component volume & release dir for customtk if it does not exist.
  # For example: /afs/eda/customtk/tk14.1.99a/<comp>
  #              /afs/eda/customtk/tk14.1.99a/<comp>/14.1
  if (IsDelivered($component) == 1) {

    # Get the amount of space used by this component in the reference level.
    #
    # Using "tk" as the space reference for all cases. It was getting too
    # complicated to determine a unique reference level for each situation.
    $spaceRefDir = "/afs/eda/$spaceRefLevel/$component/14.1";
    $rc = getSpaceData($spaceRefDir);
    if ($rc > 0) {
      CleanExit("ERROR: Unable to get the amount of space used by this ".
                "component in the $spaceRefLevel level", $ERROR);
    }
    print "\n  $component component in $spaceRefLevel respository is ".
      "using: $compSpace{'usedKb'} KB\n";

    # Calculate new quota as 2X usedKB for last TK version.
    CalcNewVolQuota($component);

    # Change the ref level to tk or customtk
    my $tkRefLevel= "tk";
    $hLDirPair = "customtk/tk$toolKit";
    $release = "";
    $rc = CreateCompVol($component, $hLDirPair, "", "k", $tkRefLevel,
                        $luciQuotaMb, $tgtQuotaKb, $release);
    if ($rc > 0) {
      CleanExit("ERROR: Unable to create new volume $hLDirPair/$component",
                $ERROR);
    }

    # Create release directory customtk/tk14.1.nnaaaaaa/<comp>/14.1
    $rc = CreateRlsDir($hLDirPair, $component, $tkRefLevel);
    if ($rc > 0) {
      CleanExit("ERROR: Unable to initialize release directory " .
                "$hLDirPair/$component/14.1", $ERROR);
    }
  }
}


# Output line seperator to log file prior to posting results for next component
print "\n-----------------------------------------------------------------" .
  "---------------\n";

chomp($logDate = `date +%C%y-%m-%d\\ %H:%M:%S`);
CleanExit("\n$logDate $appName complete", $OK);


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {
  CleanExit("\n[$appName] Caught interruption - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : handleDIE()
# Purpose: To handle an unexpected die().
# RCs    : none
#------------------------------------------------------------------------------
sub handleDIE {
  chomp(my ($errMsg) = @_);
  CleanExit("$errMsg\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : CleanExit($message, $rc)
# Purpose: Performs any applicatin clean up and exits with rc
# RCs    : none
#------------------------------------------------------------------------------
sub CleanExit {
  my ($message, $rc) = @_;
  print "$message\n";
  print "Return code: $rc\n";
  close (STDOUT);
  chdir($startDir) if (defined($startDir));
  exit $rc;
}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
Creates AFS volumes in tk14.1.n repositories for all components defined in the
specified Tool Kit.

Assumption: the following mount points have already been created 
            (requires STG IT Admin):

  /afs/eda.fishkill.ibm.com/tk<tool_kit>
    For example: /afs/eda.fishkill.ibm.com/tk14.1.99a
  /afs/eda.fishkill.ibm.com/customtkb
  /afs/eda.fishkill.ibm.com/customtk

If the -c option is not used to identify an individual component, the script
will process all components in the specified Tool Kit (with the exception of
svntest and svn_test components).

This script must be run as svnlib from AIX since the Luci CLI commands only work on AIX.

The svnlib ID must have at least insert privledges on the directories listed above.

Log files are written to /afs/eda/data/edainfra/volume_creation

";

  my $syntax = "
SYNTAX:
  $appName <-t tool_kit> [-c component] [-h] [-k] [-y] [-yy]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  tool_kit     = Tool Kit version (ie, 14.1.1, 14.1.2 ...)
  component    = name of component (e.g., einstimer)
  -h             application help
  -k             Suppress execution of significant commands for debugging
                 This option also disables verification of created directories.
  -y             Verbose (print the invocation of each command)
  -yy            More verbose (print the invocation of each command and
                 target/actual quotas)

";

  print $progDescription;
  print $syntax;
  print $where;
}

#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Capture command line arguments for logging (before GetOptions deletes them)
  $cmdLineArgs = join(' ', @ARGV);

  # Parse command line arguments
  my $noCtk = 0;
  $permsRefLevel = "tk";
  $spaceRefLevel = "tk";
  GetOptions ('component|c=s'  => \$component,
              't=s'            => \$toolKit,
              'k'              => \$noCmdExec,
              'y'              => \$verbose,
              'yy'             => \$verbose2,
              'help|h|?'       => \$help
              ) || return $ERROR;

  # If help requested, show usage
  if ($help) {
    printHelp();
    return $ERROR;
  }

  # Validate required inputs
  if (! $toolKit) {
    print "ERROR: Tool Kit (-t) must be specified\n";
    return $ERROR;
  }
  unless ($toolKit =~ /^14\.1\./) {
    print "ERROR: Tool Kit must start with 14.1.\n";
    return $ERROR;
  }

  # Enable regular verbose also if the second level verbose is specified
  $verbose = 1 if ($verbose2);

  # Verify that operating system is AIX
  my $osStr = `uname -a`;
  if ($osStr !~ /^AIX/) {
    print "ERROR: This script must be run from AIX.\n";
    print "       The Luci CLI commands only work on AIX.\n";
    return $ERROR;
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : getSpaceData($lvl, $component)
# Purpose: Get space stats from fs lq command for a level and component
#
# fs lq results            are in KB
# luci_cmd -l create -q units are MB
# luci_cmd -l update -q units are MB
# luci_cmd -l history   units are KB !!!
# luci_cmd -l query     units are KB !!!
#
# RCs    : 0 = OK
#          8 = ERROR
#-----------------------------------------------------------------------------
sub getSpaceData {

  my ($dir) = @_;

  my @fsLq = ();
  my $line;
  my @tokens = ();
  my $command = "";

  if (-d $dir) {

    $command = "fs lq $dir";
    chomp(@fsLq = `$command`);
    my $rc = $? >> 8;

    if ($rc > 0) {
      print "ERROR: $command failed\n";
      return $ERROR;
    }

    # Process fs lq results
    foreach $line (@fsLq) {

      # Skip fs lq header line
      next if (substr($line,0,6) eq "Volume");

      # Parse stats
      @tokens = split(/ +/, $line);

      $compSpace{'volName'} = $tokens[0];
      $compSpace{'quotaKb'} = $tokens[1];
      $compSpace{'usedKb'}  = $tokens[2];
      $compSpace{'usedPct'} = $tokens[3];
      $compSpace{'partPct'} = $tokens[4];

      $compSpace{'volName'} =~ s/(^\s+|\s+$)//g;
      $compSpace{'quotaKb'} =~ s/(^\s+|\s+$)//g;
      $compSpace{'usedKb'}  =~ s/(^\s+|\s+$)//g;
      $compSpace{'usedPct'} =~ s/(^\s+|\s+$)//g;
      $compSpace{'partPct'} =~ s/(^\s+|\s+$)//g;
    }
  }
  else {
    # If the component/release directory does not exist, set the results 
    # to nothing
    $compSpace{'volName'} = 0;
    $compSpace{'quotaKb'} = 0;
    $compSpace{'usedKb'}  = 0;
    $compSpace{'usedPct'} = 0;

    if (!$noCmdExec) {
      print "  ERROR: Cannot get volume information because $dir does not exist\n";
      return $ERROR;
    }
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : copyAclToRelDir($refDir, $tgtDir)
# Purpose: Copy AFS ACL from reference dir to new component/14.1 directory.
# RCs    : 0 = OK
#          8 = ERROR
#-----------------------------------------------------------------------------
sub copyAclToRelDir {

  my ($refDir, $tgtDir) = @_;
  my $rc = 0;
  my $command;

  if (-d $refDir) {
    $command = "$FS_CMD ca $refDir $tgtDir";
    chomp($logDate = `date +%C%y-%m-%d\\ %H:%M:%S`);
    print "  $logDate Running $command\n" if ($verbose);

    # Skip command execution if the -k option was specified
    unless ($noCmdExec) {
      @results = `$command`;
      $rc = $? >> 8;

      if ($rc > 0) {
        print "ERROR: Unable to set ACL on $tgtDir\n";
        print @results;
        return $ERROR;
      }
    }
  }
  else {
    $rc = 8;
    print "ERROR: Unable to copy ACL from reference dir. $refDir does not exist.\n";
  }

  return ($rc);

}


#------------------------------------------------------------------------------
# Name   : CreateSubDirs($mountPointDir)
# Purpose: Run setup_dirs script to create subdirectories.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub CreateSubDirs {

  $command = "$SETUP_DIRS";
  $command .= " --all";
  $command .= " --no_32bit";
  $command .= " --makefiles";
  $command .= " $mountPointDir/14.1";

  chomp($logDate = `date +%C%y-%m-%d\\ %H:%M:%S`);
  print "  $logDate Running $command\n" if ($verbose);

  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    @results = `$command`;
    $rc = $? >> 8;

    if ($rc > 0) {
      print "ERROR: $SETUP_DIRS failed\n";
      print @results;
      return $ERROR;
    }
  }
  return $OK;

}


#------------------------------------------------------------------------------
# Name   : mtPtDirExists($mountPointDir)
# Purpose: Verify existence of mount point directory.
#          Anticipate a delay in Luci completion of create request.
#          Retry after 5 seconds if the directory is not present.
#          Give up after 36 retrys.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub mtPtDirExists {

  my ($mountPointDir) = @_;
  my $mountPointExists = 0;
  my $i = 0;

  unless ($noCmdExec) {
    for($i = 0; $i < 36; $i++) {
      chomp(my $logDate = `date +%C%y-%m-%d\\ %H:%M:%S`);
      print "$logDate Checking for existence of new mount point directory\n";
      if ((-d $mountPointDir) && (! $noCmdExec)) {
        $mountPointExists = 1;
        last;
      }
      else {
        sleep 5;
      }
    }
  }
  else {

    # If this is a dry run, pretend that this routine passed.
    $mountPointExists = 1;
  }

  return $mountPointExists;

}


#------------------------------------------------------------------------------
# Name   : CreateCompRelDir($mountPointDir)
# Purpose: Verify existence of component/14.1 directory.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub CreateCompRelDir {

  unless ($noCmdExec) {
    mkdir("$mountPointDir/14.1");
    if (! -d "$mountPointDir/14.1") {
      return $ERROR;
    }
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : CalcNewVolQuota($component)
# Purpose: Calculate new quota as 2X usedKB for last TK version.
#          Convert from KB to MB and round up to 1 MB if necessary.
#          Invoke exception process for newQuotas > 8000 MB.
# RCs    : 0 = OK
#------------------------------------------------------------------------------
sub CalcNewVolQuota {

  my ($component) = @_;

  # Calculate new quota as 2X usedKB for last TK version
  # Convert from KB to MB and round up to 1 MB if necessary
  # Invoke exception process for newQuotas > 8000 MB
  my $tgtQuotaMb = ((2 * $compSpace{'usedKb'})/1000);
  $tgtQuotaMb = 50 if ($tgtQuotaMb < 1);

  # Convert target quota to a whole number
  $tgtQuotaMb = sprintf("%.0f", $tgtQuotaMb);
  print "  Target quota for new $component volumes: $tgtQuotaMb MB\n";

  # Don't request Luci to provide more than 8192 MB (the maximum that Luci will
  # accept.
  if ($tgtQuotaMb <= 8192) {
    $luciQuotaMb = $tgtQuotaMb;
  }
  else {
    $luciQuotaMb = 8192;
    $msg = "WARNING: The target quota for $component exceeds the maximum that can be requested in Luci.\n";
    $msg .= "WARNING: The maximum Luci quota of 8192 MB will be substituted. An STGIT Help ticket must be opened to request that the quota be increased to the target quota for the $component AFS volumes created by this script.";
    print "$msg\n";
  }
  $tgtQuotaKb = ($tgtQuotaMb * 1000);
  $luciQuotaKb = ($luciQuotaMb * 1000);

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : CreateNewVol($afsId, $afsCellShort, $volName, $luciQuotaMb, $mountPointDir)
# Purpose: Request creation of a new volume.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub CreateNewVol {

  my ($afsId, $afsCellShort, $volName, $luciQuotaMb, $mountPointDir, $tgtQuotaKb) = @_;

  # Construct command to request creation of a new volume.
  # Luci CLI requires that fully qualified cell name be used in mount point path (i.e., eda.fishkill.ibm.com)
  # For example: /afs/eda/projects/luci/bin/luci_cmd -o create -u svnlib -c eda -v ship.elm -q 1 -m /afs/eda.fishkill.ibm.com/ship/elm -w 30 -e
  $command = "$LUCI_CMD -o create";
  $command .= " -u $afsId";
  $command .= " -c $afsCellShort";
  $command .= " -v $volName";
  $command .= " -q $luciQuotaMb";
  $command .= " -m $mountPointDir";
  $command .= " -w 30";
  #$command .= " -e"; # Send email to owner of AFS ID running this process

  chomp(my $logDate = `date +%C%y-%m-%d\\ %H:%M:%S`);
  print "  $logDate Running $command\n" if ($verbose);

  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    @results = `$command`;
    $rc = $? >> 8;

    if ($rc > 0) {
      print "ERROR: Unable to create AFS volume to be mounted at $mountPointDir\n";
      print @results;
      return $ERROR;
    }
    else {
      print @results;
    }
  }

  # Verify existence of mount point directory.
  $mountPointExists = mtPtDirExists($mountPointDir);
  unless ($mountPointExists) {
    print "ERROR: Mount point directory $mountPointDir does not exist\n";
    return $ERROR;
  }

  # Verify quota of new volume
  %compSpace = ();
  getSpaceData($mountPointDir);
  if ($verbose2) {
    print "\n  Checking quota of new AFS volume at $mountPointDir:\n";
    print "    Target:          $tgtQuotaKb KB\n";
    print "    Actual:          $compSpace{'quotaKb'} KB\n";
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : CopyDotFiles($component, $mountPointDir)
# Purpose: Copy .owner file from /afs/eda/build/<component>/14.1 (if it exists).
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub CopyDotFiles {

  my ($component, $mountPointDir) = @_;
  print "\n";

  my @dotFiles = (".owner", ".dont_ship");
  foreach my $file (@dotFiles) {
    my $srcDotFile = "/afs/eda/tk/$component/14.1/$file";
    if ($file eq ".owner") {
      $srcDotFile = "/afs/eda/build/$component/14.1/$file";
    }
    my $tgtDotFile = "$mountPointDir/14.1/$file";
    if (! $noCmdExec) {
      copy($srcDotFile, $tgtDotFile) if (-e $srcDotFile);
      print "Copying $file to $tgtDotFile\n";
    }
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : CreateVolName($toolKit, $component, $qualifier)
# Purpose: Create volume name in this format:
#           /afs/eda/tk14.1.99a          = tk141b99a (component == "")
#           /afs/eda/customtk/tk14.1.99a = tk141k99a (component == "")
#           customtkb/component          = tk141_99a.ess
#           customtk/component           = tk141k99a.ess
#------------------------------------------------------------------------------
sub CreateVolName {

  my ($toolKit, $component, $qualifier) = @_;

  my $volName =  "tk141" . $qualifier;

  my @tokens = split(/\./, $toolKit);
  shift @tokens;
  shift @tokens;
  $volName .= join(".", @tokens);

  $volName .= "." . $component if ($component ne "");

  # Do not let the volume name exceed 22 characters in length
  if (length($volName) > 22 ) {
     $volName = substr($volName, 0, 22);
  }

  print "\n\nVOLUME NAME >>> $volName\n\n\n";

  return $volName;

}


#------------------------------------------------------------------------------
# Name   : CreateCustomVerDir($customVerDir)
# Purpose: Create AFS volume and mount point directory for HLD/<custom version>
#          if they do not exist.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub CreateCustomVerDir {

  my ($customVerDir, $mountPointDir, $tgtQuotaKb) = @_;
  my $luciQuotaMb = 5;
  my $release = "";
  my $hLDirPair = "$customVerDir";

  # Set the $volNameReposQualifier to the last character of $customVerDir
  # For instance, $volNameReposQualifier = "b" when $customVerDir = "customtkb"
  my $volNameReposQualifier = substr($customVerDir, -1, 1);

  # Create /afs/eda/customtkb/tk14.1.<nn><a> if it does not exist
  unless (-d "$mountPointDir") {
    print "\n  Need to create a volume and mount point for $mountPointDir\n";
    $volName = CreateVolName($toolKit, "", $volNameReposQualifier);

    # Request creation of a new volume.
    $rc = CreateNewVol($afsId, $afsCellShort, $volName, $luciQuotaMb,
                       $mountPointDir, $tgtQuotaKb);
    if ($rc > 0) {
      return $ERROR;
    }
  }
  else {
    print "\n  No need to create a volume because directory already " .
      "exists: $mountPointDir\n";
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : CreateRlsDir($mountPointDir, $component, $refDir, $tgtDir)
# Purpose: Create a release directory (14.1) and initialize it with permissions,
#          default subdirectories and .owner file
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
#sub CreateVolAndInit {
sub CreateRlsDir {

  my ($hLDirPair, $component, $permsRefLevel) = @_;

  $mountPointDir = "/afs/$afsCellLong/$hLDirPair/$component";

  if (-e "$mountPointDir/14.1") {
    print "\nNothing to do because directory already exists: $mountPointDir/14.1\n";
    return $OK;
  }

  # Create the 14.1 subdirectory under mount point directory
  print "\nCreating $mountPointDir/14.1 directory\n";
  $rc = CreateCompRelDir($mountPointDir);
  if ($rc > 0) {
    print "ERROR: Unable to create 14.1 subdirectory under mount point directory\n";
    return $ERROR;
  }

  # Copy permissions from reference directory to new component/14.1 directory
  $refDir = "/afs/eda/$permsRefLevel/$component/14.1";
  if (! -d $refDir) {
    print "WARING: $refDir DOES NOT EXIST!\n";
    $refDir = "/afs/eda/prod/$component/14.1";
    print "        using .. for ACLs .. $refDir\n";
  }
  $tgtDir = "$mountPointDir/14.1";
  $rc = copyAclToRelDir($refDir, $tgtDir);
  if ($rc > 0) {
    print "ERROR: Unable to set permissions for $component/14.1\n";
    return $ERROR;
  }

  # Run setup_dirs script to create subdirectories under component/14.1 directory
  CreateSubDirs($mountPointDir);
  if ($rc > 0) {
    print "ERROR: Unable to create subdirectories for $component/14.1\n";
    return $ERROR;
  }

  # Copy .owner file from /afs/eda/tk/<component>/14.1 (if it exists)
  CopyDotFiles($component, $mountPointDir);
  if ($rc > 0) {
    print "ERROR: Unable to copy .owner file\n";
    return $ERROR;
  }
}


#------------------------------------------------------------------------------
# Name   : setupLogging()
# Purpose: Enable logging
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub setupLogging {

  # Create $logDir if it does not already exist
  mkpath($logDir) if (! -d $logDir);

  # Open log file for script messages
  chomp(my $logDate = `date +%C%y%m%d\_%H%M%S`);
  my $logFile = "$logDir/" . $appName . "_" . $logDate . ".log";

  # Open a filehandle for both stdout and a log file
  open (STDOUT, "| tee -a $logFile") || die "ERROR: unable to open log file $logFile  $!\n";

  my $currentAfsId = (getpwuid($<)) [0];
  if ($currentAfsId ne "$afsId") {
    print "\nERROR: Only the $afsId AFS ID is permitted to run this script\n";
    return $ERROR;
  }

  chomp(my $dateTime = `date +%C%y-%m-%d\\ %H:%M:%S`);
  chomp(my $machine = `hostname`);
  print "\n$dateTime $currentAfsId on $machine invoked $appName $cmdLineArgs\n\n";

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : SetDefaultPermissions($dir)
# Purpose: Set default access on specified directory
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub SetDefaultPermissions {

  my ($dir) = @_;

  $command = "fs sa $dir svnlib rlidwka";
  $command .= " svnlib:write rlidwk";
  $command .= " svnlib:read rl";
  $command .= " system:administrators rlidwka";
  $command .= " system:authuser l";
  $command .= " system:anyuser l";
  $command .= " bradmin rlidwka";

  print "  $command\n" if ($verbose);

  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    @results = `$command`;
    $rc = $? >> 8;

    if ($rc > 0) {
      print "ERROR: Unable to set ACL on $dir\n";
      print @results;
      return $ERROR;
    }
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : CreateHLQCustomDir()
# Purpose: Create AFS volume and mount point directory for HLD/<custom version>
#          if they do not exist.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub CreateHLQCustomDir {

  my ($HLQCustomDir, $newTK, $tgtQuotaKb) = @_;

  # Create AFS volume and mount point directory for HLD/<custom version>
  #   if they do not exist.
  #   Example of path: /afs/eda.fishkill.ibm.com/customtkb/tk14.1.99a
  my $mountPointDir = "/afs/$afsCellLong/$HLQCustomDir/tk$newTK";
  print "\nChecking for $mountPointDir\n";
  $rc = CreateCustomVerDir($HLQCustomDir, $mountPointDir, $tgtQuotaKb);
  if ($rc > 0) {
    CleanExit("ERROR: Unable to create HLD/$HLQCustomDir directory", $ERROR);
  }

  # Set default permissions on .../customtkb directory
  #   Example of path: /afs/eda.fishkill.ibm.com/customtkb
  print "\n  Setting minimum permissions on high level directories so that ";
  print "new subdirectories inherit those permissions\n";
  $rc = SetDefaultPermissions("/afs/$afsCellLong/$HLQCustomDir");
  if ($rc > 0) {
    CleanExit("ERROR: Unable to set default permissions on directory " .
              "/afs/$afsCellLong/$HLQCustomDir", $ERROR);
  }

  # Set default permissions on .../customtkb/<custom tk version> directory
  #   Example of path: /afs/eda.fishkill.ibm.com/customtkb/tk14.1.99a
  $rc = SetDefaultPermissions($mountPointDir);
  if ($rc > 0) {
    CleanExit("ERROR: Unable to set default permissions on " .
              "directory $mountPointDir", $ERROR);
  }
}


#------------------------------------------------------------------------------
# Name   : CreateCompVol($component, $hLDirPair, $customTkQualifier,
#                        $volNameReposQualifier, $refDir, "tk", "tk")
# Purpose: Create new volume and initialize mount point directory
# RCs    : 0 = OK
#          8 = ERROR
#-----------------------------------------------------------------------------
sub CreateCompVol {

  my ($component, $hLDirPair, $customTkQualifier, $volNameReposQualifier,
      $permsRefLevel, $luciQuotaMb, $tgtQuotaKb, $release) = @_;

  my $mountPointDir = "/afs/$afsCellLong/$hLDirPair/$component";
  $mountPointDir .= "/$release" if ($release);

  # Create volume and mount point if it does not exist
  if (! -d "$mountPointDir") {

    print "\nCreating volume and mount point at: $mountPointDir\n";

    # Determine the appropriate volume name
    $volName = CreateVolName($toolKit, $component, $volNameReposQualifier);

    # Create new volume and initialize mount point directory
    $rc = CreateNewVol($afsId, $afsCellShort, $volName, $luciQuotaMb,
                       $mountPointDir, $tgtQuotaKb);
    if ($rc > 0) {
      print "ERROR: Unable to create new volume at $mountPointDir\n";
      return $ERROR;
    }
  }

  else {
    print "\nNothing to do because directory already exists: $mountPointDir\n";
    return $OK;
  }

  # Initialize the 14.1 directory if it was just created
  if ($release) {

    # Copy permissions from reference directory to new component/14.1 directory
    $refDir = "/afs/eda/$permsRefLevel/$component/14.1";
    if (! -d $refDir) {
      print "WARING: $refDir DOES NOT EXIST!\n";
      $refDir = "/afs/eda/prod/$component/14.1";
      print "        using .. for ACLs .. $refDir\n";
    }
    $tgtDir = "$mountPointDir";
    $rc = copyAclToRelDir($refDir, $tgtDir);
    if ($rc > 0) {
      print "ERROR: Unable to set permissions for $component/14.1\n";
      return $ERROR;
    }

    # Run setup_dirs script to create subdirectories under 
    # component/14.1 directory
    CreateSubDirs($mountPointDir);
    if ($rc > 0) {
      print "ERROR: Unable to create subdirectories for $component/14.1\n";
      return $ERROR;
    }

    # Copy .owner file from /afs/eda/tk/<component>/14.1 (if it exists)
    CopyDotFiles($component, $mountPointDir);
    if ($rc > 0) {
      print "ERROR: Unable to copy .owner file\n";
      return $ERROR;
    }

  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : CreateCompDir($itemNum, $hLDir, $tkExtendedDir, $component)
# Purpose: Create component directory
# RCs    : 0 = OK
#          8 = ERROR
#-----------------------------------------------------------------------------
sub CreateCompDir {

  my ($hLDirPair, $component) = @_;

  $mountPointDir = "/afs/$afsCellLong/$hLDirPair/$component";
  unless (-e "$mountPointDir") {

    print "\nCreating directory: $mountPointDir\n";
    unless ($noCmdExec) {
      mkdir "$mountPointDir";
      unless (-d "$mountPointDir") {
        print "ERROR: Could not create directory $mountPointDir\n";
        return $ERROR;
      }
    }
  }
  else {
    if (!-d "$mountPointDir") {
        print "ERROR: $mountPointDir already exists and it is not a directory.\n";
        return $ERROR;
    }
    print "\nNothing to do because directory already exists: $mountPointDir\n";
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : IsDelivered($component)
# Purpose: Determine if this component needs to have a directory in ship and tk
# RCs    : 1 = delivered
#          0 = not delivered
#------------------------------------------------------------------------------
sub IsDelivered {

  my ($component) = @_;

  # Construct a list of delivered components
  my $command = "$GET_COMP";
  $command .= " -t $toolKit";
  $command .= " -ct DELIVERED,TEST_SUPPORT";
  $command .= " -q";
  $command .= " -db $dbMode" if ($dbMode);
  print "Running $command\n" if ($verbose);

  my @results = `$command`;
  my @delComps = split(/,/, $results[0]);

  my $rc = 0;
  $rc = 1 if (grep(/^$component$/, @delComps));

  print "Is delivered: $rc\n" if ($verbose);

  return $rc;

}
