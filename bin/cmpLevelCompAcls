#!/usr/bin/perl
# =============================================================================
#
#    FILE: cmpLevelCompAcls
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Eric Hull
#    DATE: 07/20/2012
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 07/20/2012 EH  Initial coding.
# =============================================================================

use warnings;
use strict;
use Getopt::Std;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");

# Global variables
my $release = "";
my $edaDir = "/afs/eda";
my $dir = "";
my $line = "";
my %allGrps = ();
my $dateTime = "";
my %refLevelAclsHash = ();
my %tgtLevelAclsHash = ();
my $grp = "";

# Program variables
my $appName = "cmpLevelCompAcls";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $help         = "";
my $noCmdExec    = 0;
my $verbose      = 0;
my $tgtLevel     = "";
my $refLevel     = "";
my $level        = "";
my $component    = "";
my $listref      = 0;
my $listtgt      = 0;
my $listdiff     = 0;

# Return codes
my $OK    = 0;
my $ERROR = 8;

# Generic application variables
my @tokens = ();
my $rc  = $ERROR;
my $startDir = $ENV{"PWD"};
my $progRC = "";


#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Deal nicely with unexpected exits
$SIG{'INT'}   = sub { handleInterruption(); };
$SIG{'QUIT'}  = sub { handleInterruption(); };
$SIG{__DIE__} = sub { handleDIE(); };


# Read the command line arguments
$progRC = processArgs();
if ($progRC == $ERROR) {
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}

# Get reference level ACLs if needed
if (($listref) || ($listdiff)) {
  chomp($dateTime = `date +%C%y-%m-%d\\ %H:%M:%S`);
  print "$dateTime Getting reference level ACLs: $edaDir/$refLevel/$component/$release\n";
  %refLevelAclsHash = GetAclsHash($refLevel);
}

# List ALL reference ACLs if -listref was specified on command line
if ($listref) {

  foreach $dir (sort(keys %refLevelAclsHash)) {
    print "\n$dir\n";   
    foreach $grp (sort(keys %{$refLevelAclsHash{$dir}})) {
      print "  $grp  $refLevelAclsHash{$dir}{$grp}\n";
    }
  }
}

# Get target level ACLs if needed
if (($listtgt) || ($listdiff)) {
  chomp($dateTime = `date +%C%y-%m-%d\\ %H:%M:%S`);
  print "$dateTime Getting target level ACLs:    $edaDir/$tgtLevel/$component/$release\n";
  %tgtLevelAclsHash = GetAclsHash($tgtLevel);
}

# List ALL target ACLs if -listref was specified on command line
if ($listtgt) {

  foreach $dir (sort(keys %tgtLevelAclsHash)) {
    print "\n$dir\n";
    foreach $grp (sort(keys %{$tgtLevelAclsHash{$dir}})) {
      print "  $grp  $tgtLevelAclsHash{$dir}{$grp}\n";
    }
  }
}

# Only continue if  we need to list access differences between levels
exit $OK unless ($listdiff);

print "\nOnly listing \"differences\" in access for $component/$release directories.\n";
print "\nAbsence of results for a directory indicates that no differences were found.\n";

# For each target directory
foreach $dir (sort(keys %tgtLevelAclsHash)) {

  my $dirComment = "";
  %allGrps = ();
  
  # Skip .svn directories since they should not be present in target
  next if ($dir =~ /.svn/);
  
  print "\n-----------------------------------------------\n";
  $dirComment = "<-- this is the $component/$release directory" if ($dir eq ".");
  print "DIR $dir $dirComment\n\n";

  # Does current directory exist in REF hash?
  if (exists $refLevelAclsHash{$dir}) {

    printf "    %-21s %-7s       %-7s\n", "GROUP/ID", uc($refLevel), uc($tgtLevel);
  
    # Iterate through each REF group/access pair for current directory
    foreach $grp (sort(keys %{$refLevelAclsHash{$dir}})) {
    
      # Start a list of all grps (REF + TGT) in this directory
      if (! exists $allGrps{$grp}) {
        $allGrps{$grp} = "";
      }
    }
    
    # Iterate through each TGT group/access pair for current directory
    foreach $grp (sort(keys %{$tgtLevelAclsHash{$dir}})) {  
    
      # Continue a list of all grps (REF + TGT)
      if (! exists $allGrps{$grp}) {
        $allGrps{$grp} = "";
      }
    }
    
    # Iterate through all grps (REF + TGT) for current directory
    foreach $grp (sort(keys(%allGrps)))  {

      # Check for existance of current group in REF directory
      if (! exists $refLevelAclsHash{$dir}{$grp}) {
        if (exists $tgtLevelAclsHash{$dir}{$grp}) {
          printf "    %-21s %-7s       %-7s\n", $grp, ".", $tgtLevelAclsHash{$dir}{$grp};
        }
        else {
          printf "    %-21s %-7s       %-7s\n", $grp, ".", ".";
        }
      }    
  
      # Check for existance of current group in TGT directory
      elsif (! exists $tgtLevelAclsHash{$dir}{$grp}) {
        printf "    %-21s %-7s       %-7s\n", $grp, $refLevelAclsHash{$dir}{$grp}, ".";
      }  
  
      # If the group exists in both locations, check if permissions match
      else {
        if ($refLevelAclsHash{$dir}{$grp} ne $tgtLevelAclsHash{$dir}{$grp}) {
          printf "    %-21s %-7s       %-7s\n", $grp, $refLevelAclsHash{$dir}{$grp}, $tgtLevelAclsHash{$dir}{$grp};
        }
      }
    }
  }
  else {
    print "    This directory is not in " . uc($refLevel) . "\n";
  }
}

exit $OK;


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {
  CleanExit("\n[$appName] Caught interruption - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : handleDIE()
# Purpose: To handle an unexpected die().
# RCs    : none
#------------------------------------------------------------------------------
sub handleDIE {
  CleanExit("\n[$appName] Caught an unexpected die - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : cleanup($message, $rc)
# Purpose: Performs any applicatin clean up and exits with rc
# RCs    : none
#------------------------------------------------------------------------------
sub CleanExit {
  my ($message, $rc) = @_;
  print "$message\n";
  print "Return code: $rc\n";
  chdir($startDir) if (defined($startDir));
  exit $rc;
}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints description and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
This script compares component/release subdirectory ACLs between two levels.

";

  my $syntax = "
SYNTAX:
  $appName <-reflevel reference level> <-tgtlevel target level> <-c component> [-r release]
  < -listdiff | -listref | -listtgt >
  [-h] [-k] [-y]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  
  reference level = level to be used as a reference for comparison
  target level    = level of interest to be compared to reference
  component  component to be updated
  release    Tool Kit release (13.1 or 14.1). Defaults to 14.1 if -r is not used.
  -listdiff  only list differences in access (groups/ids with matching access
             will be ignored)
  -listref   list ALL access entries for component/release in reference level (not
             a comparison)
  -listtgt   list ALL access entries for component/release in target level (not
             a comparison)             
  -h         (optional) application help
  -k         (optional) Suppress execution of significant commands for debugging
  -y         (optional) Verbose
";

  print $progDescription;
  print $syntax;
  print $where;
}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('reflevel=s'  => \$refLevel,
        'tgtlevel=s'  => \$tgtLevel,
	      'c=s'        => \$component,
        'r=s'        => \$release,
        'k'          => \$noCmdExec,
        'y'          => \$verbose,
        'listref'    => \$listref,
        'listtgt'    => \$listtgt,
        'listdiff'   => \$listdiff,
	      'help|h|?'   => \$help) || return $ERROR;

  # If help requested, show usage
   if ($help) {
     printHelp();
     return $ERROR;
   }

  # Validate required input
  if (! $component) {
    print "ERROR: Component (-c) is a required parameter\n";
    return $ERROR;
  }
  
  if ( (($listdiff) || ($listref)) && (! $refLevel) ) {
    print "ERROR: Level (-reflevel <reference level>) is a required parameter when -listdiff or -listref are specified\n";
    return $ERROR;
  }
  
  if ( (($listdiff) || ($listtgt)) && (! $tgtLevel) ) {
    print "ERROR: Level (-tgtlevel <target level>) is a required parameter when -listdiff or -listtgt are specified\n";
    return $ERROR;
  }
  
  if (! $release) {
      $release = "14.1";
  }
  elsif (($release ne "13.1") && ($release ne "14.1")) {
    print "ERROR: Allowed values for release are 13.1 or 14.1\n";
    return $ERROR;  
  }
  
  return $OK;

}


#------------------------------------------------------------------------------
# Name   : GetAclsHash()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub GetAclsHash {

  my ($level) = @_;
  
  my @acl = ();
  my $grp = "";
  my $permissions = "";
  my %AclsHash = ();

  # Return immediately if the component release directory is not readable
  return %AclsHash unless ( -R "$edaDir/$level/$component/$release");
  
  chdir("$edaDir/$level/$component/$release");

  # Recursively identify all of the subdirectories below the current directory
  chomp(my @dirList = `find . -type d `);

  # Iterate through each subdirectory below <component>/14.1
  foreach $dir (@dirList) {

    my @tokens = ();

    # Remove the leading ./ from directory entry returned by find command.
    # Without this, $dir looks like "./essinc".
    $dir =~ s,^.\/,,;

    if (-d $dir) {

      # Get ACL for current directory
      chomp(@acl = `fs la $dir |grep -v "Access list for" |grep -v "Normal rights"`);
    }
    else {
      print "WARNING: $edaDir/$level/$component/$release/$dir directory does not exist\n";
    }

    # @acl contains fs la output
    foreach $line (@acl) {

        # Remove leading and trailing spaces
        $line =~ s/(^\s+|\s+$)//g;

        @tokens = split(/ +/, $line);
        $grp = $tokens[0];
        $permissions = $tokens[1];
        $AclsHash{$dir}{$grp} = $permissions;
    }
  }
  return %AclsHash;
}