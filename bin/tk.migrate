#!/usr/bin/perl
# =============================================================================
#
#    FILE: tk.migrate
# CREATOR: Gregg Stadtlander
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 02/13/2014 GS  Initial coding.
# =============================================================================
use warnings;
use strict;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");
use FindBin qw($RealBin);


use lib "$RealBin/../libperl";
use TKutils;


# Global variables
my $BIN_DIR = $RealBin;
my $LOGS_DIR = "/afs/eda/data/edainfra/logs";

# Program variables
my $appName = "tk.migrate";
my $progInvocation = $appName;
foreach (@ARGV) {
  $progInvocation .= " " . $_;
}

# Program arguments
my $help            = "";
my $verbose         = 0;
my $dbMode          = "";  # default is prod if empty
my $dryRun          = 0;
my $toolKit         = "";
my $component        = "";
my $location        = "";
my $startDir;

# Return codes
my $OK    = 0;
my $ERROR = 8;

# Generic application variables
my @tokens = ();
my $entry  = "";
my $rc     = $ERROR;


#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Deal nicely with unexpected exits
$SIG{'INT'}   = sub { handleInterruption(); };
$SIG{'QUIT'}  = sub { handleInterruption(); };
$SIG{__DIE__} = sub { handleInterruption(); };

# Read the command line arguments
$rc = processArgs();
if ($rc == $ERROR) {
  print "\n[$appName] Use -h to get more details.\n";
  exit $ERROR;
}

# Read components for TK
my @allComps = SetComponents($toolKit, $component, "");
my @deliveredComps = SetComponents($toolKit, $component, "DELIVERED");


# Set the ship location
my $shipLoc = "ship";
$shipLoc = "tk" if ($location eq "tkb");

my $release = TKutils::GetRelease($toolKit, ".");

# Process the components
for $component (@allComps) {

  next if ($component eq "svntest1");

  print "\nProcessing: $component\n";

  # Create the links in the build location
  if (CreateLink($release, $toolKit, $component, $location) != $OK) {
    CleanExit("Unable to create symbolic link\n", $ERROR);
  }

  # Create the links in the ship location
  if (grep(/^$component$/, @deliveredComps)) {
    if (CreateLink($release, $toolKit, $component, $shipLoc) != $OK) {
      CleanExit("Unable to create symbolic link\n", $ERROR);
    }
  }

}


CleanExit("\nApplication complete", $OK);


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {
  CleanExit("\n[$appName] Caught interruption - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : cleanup($message, $rc)
# Purpose: Performs any applicatin clean up and exits with rc
# RCs    : none
#------------------------------------------------------------------------------
sub CleanExit {
  my ($message, $rc) = @_;

  # Log application end event
  #LogAppEvent("end");

  print "$message\n";
  print "Return code: $rc\n";
  chdir($startDir) if (defined($startDir));
  exit $rc;

}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
Migrate this tool kit to the given location.  The tool kit is assumed
to be a custom tool kit that will be linked to from the given location.
";

  my $syntax = "
SYNTAX:
  $appName <-t tk> <-l location> [-c component]
             [-dryrun] [-y] [-db dbMode] [-h]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  tk        = Tool Kit version which must exist (ie, 14.1.1 ...)
  location  = Location to migrate this tk (shipb or tkb)
  component = Process this component only
  -dryrun   = Run script in dryrun mode
  dbMode    = Database mode [default = PROD] (PROD, DEV, TEST)
  -h        = Application usage help
  -y        = Verbose mode
";

  print $progDescription;
  print $syntax;
  print $where;

}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('t=s'       => \$toolKit,
              'l=s'       => \$location,
              'c=s'       => \$component,
	      'db=s'      => \$dbMode,
	      'dryrun'    => \$dryRun,
	      'y'         => \$verbose,
	      'help|h|?'  => \$help)
    || return $ERROR;

  # If help requested, show usage
  if ($help) {
    printHelp();
    return $ERROR;
  }

  # Validate required input
  if (! $toolKit) {
    print "ERROR: Tool Kit (-t) is a required parameter\n";
    return $ERROR;
  }
  if (! $location) {
    print "ERROR: Location (-l) is a required parameter\n";
    return $ERROR;
  }
  if ($location ne "shipb" && $location ne "tkb") {
    print "ERROR: Location must be either tkb or shipb\n";
    return $ERROR;
  }

  print "Running in DRY RUN mode ...\n" if ($dryRun);

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : SetComponents()
# Purpose: Create a list of components ready for this Tool Kit
# RCs    : List of component names or empty list
#------------------------------------------------------------------------------
sub SetComponents {

  my ($tk, $comp, $type) = @_;
  print " Querying for components in $tk ...\n" if ($verbose);

  # Query the DB for tk/components for the src tool kit
  my @list = TKutils::GetComponents($tk, $comp, $type);
  print "Found " . scalar(@list) . " components\n" if ($verbose);

  return @list;

}


#------------------------------------------------------------------------------
# Name   : CreateLink($rel, $tk, $comp, $loc)
# Purpose: Create the symlink to the custom tk
# RCs    : n/a
#------------------------------------------------------------------------------
sub CreateLink {

  my ($rel, $tk, $comp, $loc) = @_;

  my $existing = "/afs/eda/tk$tk/$comp/$rel";
  my $link = "/afs/eda/$loc/$comp/$rel";
  if ($loc eq "ship" || $loc eq "tk") {
    $existing = "/afs/eda/customtk/tk$tk/$comp/$rel";
  }

  if ($verbose) {
    print " Existing: $existing\n";
    print " Link    : $link\n";
  }

  # Determine if new link is needed
  my $tgt = readlink($link);
  if (! -l $link) {
    print "  Link does not exist: $link\n";
  }
  elsif ($tgt eq $existing) {
    print "  Current link is correct: $tgt\n";
    return $OK;
  }
  else {
    print "  Creating since current link is not correct\n";
    print "   Current link: $tgt\n";
    print "   Desired link: $existing\n";
  }

  # Construct the command
  my $command = "ln -sf $existing $link";

  # Run the command and show results
  my $status = "";
  my @results;
  my $rc = TKutils::RunCommand($command, \@results, 0, $verbose);
  return $OK if ($rc == 0);

  return $ERROR;

}

