#!/usr/bin/perl
#
# =============================================================================
#
#    FILE: checkBuildRevs
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Gregg Stadtlander
#    DATE: 10/12/2011
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 10/12/2011 GS  Initial coding.
# 11/14/2011 GS  Added -email switch.
# 02/22/2012 EH  Removed amagnan from email distribution
# =============================================================================

use warnings;
use strict;
use File::stat;
use Time::localtime;
use Sys::Hostname;
use Cwd;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");
use File::Path;
use File::Copy;

#
# Global variables
#
my $BUILD   = "/afs/eda/build/";


# Program name
my $appName = "checkBuildRevs";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Constants
my @DIST_LIST = ( 'stadtlag@us.ibm.com', 
		  'jwcolem@us.ibm.com' );

# Program arguments
my $toolKit    = "";
my $component  = "";
my $emailResults = 0;
my $help       = "";
my $verbose = 0;

# Return codes
my $OK        = 0;
my $ERROR     = 8;

# Generic application variables
my $entry = "";
my @tokens = ();


# Program's global return code - initialize to ERROR
my $progRC  = $ERROR;

# Set the location and name of createFuncUpdate application
my $BIN = "/afs/eda/data/edainfra/tools/enablement/prod/bin";
my $GET_REV = "$BIN/getRevisions ";
my $GET_COMP = "$BIN/getComponents -q ";


#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

#
# Define the current directory
#
my $startDir = $ENV{"PWD"};

#
# To exit cleanly from a Ctrl+C or an unexpected die()
#
$SIG{'INT'} = sub { handleInterruption();
                    exit($ERROR);
                  };

$SIG{'QUIT'} = sub { handleInterruption();
                     exit($ERROR);
                   };

$SIG{__DIE__}  = sub { handleDIE();
                       #exit($ERROR);
                     };

#
# Read the command line arguments
#
$progRC = processArgs();
if ($progRC == $ERROR) {
    #printSyntax();
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}


#
# Define custom perl libs path and modules depending on the
# application mode.
#
use lib '/afs/eda/data/edainfra/tools/enablement/prod/libperl';
use IcofFile;


#
# Query the database for components in this Tool Kit
#
my $command;
my @results;
my @components = ();
if ($component) {
  push(@components, $component);
}
else {
  $command = $GET_COMP . " -t $toolKit -q -ct DELIVERED,BUILD_SUPPORT,TEST_SUPPORT ";
  @results = `$command`;
  @components = split(/,/, $results[0]);
}


#
# For each component determine the build working copy revision and the
# latest revision in build from the ETREE database
#
my $here = getcwd;
my $problems = "";
my $TK_VER  = $toolKit;
chop $TK_VER;
chop $TK_VER;

my $wcRev;
my $dbRev;
my $errorCount = 0;
my $compCount = scalar(@components);
foreach $entry (@components) {

  chomp($entry);
  print "Checking $entry ...\n";

  $wcRev = GetWcRevision($entry);
  print " WC revision: $wcRev\n";

  # Get the build rev from ETREE DB
  $command = $GET_REV . "-t $toolKit -c $entry -latest -l build";
  #print "Command 2: $command\n";  
  @results = `$command`;
  my $rc = $? >> 8;
  if ($rc == 0) {
    $dbRev = $results[0];
    chomp $dbRev;
  }
  else {
    $dbRev = "Not found in DB";
  }
  print " DB revision: $dbRev\n";

  if ($wcRev ne $dbRev) {
    $problems .= "Component: $entry\n";
    $problems .= " WC revision: $wcRev\n";
    $problems .= " DB revision: $dbRev\n\n";
    $errorCount++;
  }

}

# Determine the percentage of components with errors
my $errorPercent = $errorCount / $compCount * 100;
$errorPercent = sprintf("%.1d%%", $errorPercent);

if ($problems ne "") {
  print "\n";
  print "Components checked: $compCount\n";
  print "Components w/errors: $errorCount\n";
  print "Components w/errors: $errorPercent of total\n";
  print "\n\nSummary\n-------------\n$problems\n";

}
else {
  print "\nNo revision mismatches found!\n";
}



# Send an email to the admin if requested
SendEmail($problems) if ($emailResults);


exit $OK;


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {

  print "\n[$appName] Caught interruption - Exiting with a cleanUp\n";
  chdir($startDir);

}  # End of handleInterruption


#------------------------------------------------------------------------------
# Name   : handleDIE()
# Purpose: To handle an unexpected die().
# RCs    : none
#------------------------------------------------------------------------------
sub handleDIE {

  print "\n[$appName] Caught an unexpected die - Exiting with a cleanUp\n";
  chdir($startDir);

}  # End of handleDIE


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
Compares a component's build working copy against the revision in ETREE DB.
";

  my $syntax = "
SYNTAX:
  $appName <-t tool_kit> [-c component] [-email] [-h] [-y]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  -t Tool Kit [14.1.0, 14.1.1 ...].
  -c Component (run check for a single component [no mail sent])
  -email Email results to distribution list [default = no email]
  -h Application help (optional)
  -y Verbose mode (optional)
";

  print $progDescription;
  print $syntax;
  print $where;

}       # End of printHelp


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('tool_kit|t=s'    => \$toolKit,
              'comp|c=s'        => \$component,
              'email'           => \$emailResults,
              'verbose|y'       => \$verbose,
              'help|h|?'        => \$help
              ) || return $ERROR;


  # If help requested, show usage
  if ($help) {
    printHelp();
    return $ERROR;
  }


  # Verify the obsolete file.
  my $msg = "";
  if (! $toolKit) {
    $msg = "ERROR: tool_kit (-t) is a required parameter\n";
  }

  # Return
  if ($msg ne "") {
    print $msg;
    return $ERROR;
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : SendEmail()
# Purpose: Emails the results
# RCs    : none
#------------------------------------------------------------------------------
sub SendEmail {

  my ($body) = @_;
  my $host = hostname();
  my $user = `whoami`;
  chomp($user);

  # Return if processing a single component
  if ($component ne "") {
    print "Running in single component mode - no mail sent!\n";
    return;
  }

  # Return if no action required by admin.
  #return if ($body eq "");

  my $address;
  foreach $address (@DIST_LIST) {
    $address =~ s/\@/\\\@/;

    `/bin/mailx -s "Results checkBuildRevs ($errorPercent w/errors)" $address << EOF
Hello,

You are receiving this email because you are the owner or builder for one
of the 14.1 components in the report below.

This report is generated by comparing build SVN work copy revisions
against the latest build revision stored in the ETREE database for
Components in the $toolKit Tool Kit. The results below indicate which
Components either have mismatched revisions, no build SVN working copy
or no revision in the ETREE database.

How to resolve these errors
----------------------------
For mismatched revisions the builder/owner must include a call to
svnLog -t $toolKit -c <component> -l build -e EXTRACTED -m <message>
in their build working copy update process.  An alternate and better
method is to run svnExtract which will update the working copy and
run svnLog for you.

If no build working copy found then the Component owner must contact
Jody Coleman to have their Component's source file imported into a
new SVN repository.

If no revisions found in the ETREE database then most likely the first
update of the build working copy did not include a call to
svnLog -e EXTRACTED.  Please contact Gregg Stadtlander for assistance.

Components checked: $compCount
Components w/errors: $errorCount
Components w/errors: $errorPercent of total

$body

Thanks,
ETREE/SVN Team
`;
  }

}

#------------------------------------------------------------------------------
# Name   : GetWcRevision($component)
# Purpose: Determine the build WCs current revision
# RCs    : none
#------------------------------------------------------------------------------
sub GetWcRevision {

  my ($component) = @_;
  my $rev = 0;
  my $command = "/afs/btv/data/subversion/bin/svn info";

  # Determine the SVN URL
  my $url = "https://greenjiffy.fishkill.ibm.com/eda/tk/$component/trunk";

  # Determine the URLs last changed revision
  my $dir = "/afs/eda/build/$component/$TK_VER";
  my $cmd = "$command $dir | grep \"Last Changed Rev\" | awk -F \": \" '{print \$2}'";
  #print "Command_b: $cmd\n";
  @results = `$cmd`;
  if (scalar(@results) > 0) {
    $rev = $results[0];
    chomp $rev if ($rev);
  }

  # Determine the URLs revision if unable to read last changed revision
  if ($rev == 0) {
    $cmd = "$command $dir | grep \"Revision\" | awk -F \": \" '{print \$2}'";
    #print "Command_b: $cmd\n";
    @results = `$cmd`;
    $rev = $results[0];
    chomp $rev;
  }

  return $rev

}
