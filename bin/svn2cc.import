#!/usr/bin/perl
# =============================================================================
#
#    FILE: svn2cc.import
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Eric Hull
#    DATE: 09/11/2012
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 09/11/2012 EH  Initial coding.
# 09/11/2012 EH  Fix for redundant component directory in ClearCase path.
# 09/25/2012 EH  Updated references to VOB name that changed today.
# 12/19/2012 EH  Fixed bug in RsyncVerify() caused by a new rysnc message 
#                introduced in rsync version 3.0.6.
# =============================================================================

use warnings;
use strict;
use Getopt::Std;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");

# Global variables
my $CT            = "/opt/rational/clearcase/bin/cleartool";
my $CLEARFSIMPORT = "/opt/rational/clearcase/bin/clearfsimport";
my $RSYNC         = "/usr/bin/rsync";


# Program variables
my $appName = "svn2cc.import";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $help         = "";
my $verbose      = 0;
my $toolKit      = "";
my $noCmdExec    = 0;
my $component    = "";
my $ccView       = "";
my $compRootDir  = "";
my $svnSrcDir    = "";

# Return codes
my $OK    = 0;
my $ERROR = 8;

# Generic application variables
my @tokens = ();
my $entry  = "";
my $rc  = $ERROR;
my $startDir = $ENV{"PWD"};
my $progRC = "";

#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Deal nicely with unexpected exits
$SIG{'INT'}   = sub { handleInterruption(); };
$SIG{'QUIT'}  = sub { handleInterruption(); };
$SIG{__DIE__} = sub { handleDIE(); };


# Read the command line arguments
$progRC = processArgs();
if ($progRC == $ERROR) {
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}


# login to BTV machine with svnlib BTV AFS ID (verify that current ID is svnlib)

# newgrp ccaes (if ccaes is not already the primary group)

# ct setview edatk14.1.1

# ct mkact -in stream:14.1.1@/vobs/eda_tksource3 14.1.1_20120821

# ct setact 14.1.1_20120821 (if necessary) [How are we going to reuse a single activity for multiple TK components?]
# ct setact 14.1.1_import1

# Import Tool Kit data to ClearCase
$rc = ImportSvnData();
if ($rc > 0) {
  CleanExit("ERROR: Verification of content in ClearCase failed.", $ERROR);
}

# Verify content in ClearCase
$rc = RsyncVerify();
if ($rc > 0) {
  CleanExit("ERROR: Verification of content in ClearCase failed.", $ERROR);
}

# TODO: Create script that Jim can call from svn2cc.master to create baseline
#  after all components have been processed...

CleanExit("Application complete", $OK);


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {
  CleanExit("\n[$appName] Caught interruption - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : handleDIE()
# Purpose: To handle an unexpected die().
# RCs    : none
#------------------------------------------------------------------------------
sub handleDIE {
  CleanExit("\n[$appName] Caught an unexpected die - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : cleanup($message, $rc)
# Purpose: Performs any applicatin clean up and exits with rc
# RCs    : none
#------------------------------------------------------------------------------
sub CleanExit {
  my ($message, $rc) = @_;
  print "$message\n";
  print "Return code: $rc\n";
  chdir($startDir) if (defined($startDir));
  exit $rc;
}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
This script checks in Tool Kit source data to ClearCase
";

  my $syntax = "
SYNTAX:
  $appName <-t tool_kit> <-c component> [-h] [-y]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  tool_kit = Tool Kit version (ie, 14.1.1, 14.1.2 ...
  component = Tool Kit component (ie, hdp, pet ...
  -h         (optional) application help
  -y         (optional) Verbose
";

  print $progDescription;
  print $syntax;
  print $where;
}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('tk|t=s'     => \$toolKit,
              'component|c=s' => \$component,
              'y'          => \$verbose,
              'help|h|?'   => \$help) || return $ERROR;

  # If help requested, show usage
   if ($help) {
     printHelp();
     return $ERROR;
   }

  # Validate required input
  if (! $toolKit) {
    print "ERROR: Tool Kit (-t) is a required parameter\n";
    return $ERROR;
  }

  if (! $component) {
    print "ERROR: Component (-c) is a required parameter\n";
    return $ERROR;
  }
  
  $ccView    = "edatk" . $toolKit;
  
  $compRootDir = "/vobs/eda_tksource3/$component";
  
  #$svnSrcDir = "/afs/eda/u/ehull/my_data/svn2cc/$component"; # FOR TESTING ONLY
  $svnSrcDir = "/afs/eda/data/edainfra/svn2cc/tk$toolKit/$component";
  
  return $OK;

}


#------------------------------------------------------------------------------
# Name   : ImportSvnData()
# Purpose: Import SVN data to ClearCase
#          Note: -nsetevent creates element versions that are newer than the original sources.
#          For this project, no attempt will be made to sync datetime stamps with contents of SVN.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub ImportSvnData {

  my $rc = 0;
  
  print "Import SVN data to ClearCase\n";

  # TODO: Need to add a "ct mount /vobs/eda_tksource3" before running the first CC command...

  my $importCmd = "$CLEARFSIMPORT -nsetevent";
  #$importCmd .= " -preview"; # DEBUG
  $importCmd .= " -recurse";
  $importCmd .= " -rmname";
  #$importCmd .= " $svnSrcDir"; # This caused the extra component directory to appear in CC path
  $importCmd .= " $svnSrcDir/14.1";
  $importCmd .= " $compRootDir";
  
  my $command = "$CT setview";
  $command .= " -exec";
  $command .= " \"$importCmd\"";
  $command .= " $ccView";

  print "Running $command\n" if ($verbose);
  
  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    my @results = `$command`;
    $rc = $? >> 8;
    
    print @results; # DEBUG
    
    if ($rc > 0) {
      print "ERROR: Unable to import SVN data to ClearCase\n";
      print @results;
      return $ERROR;
    }    
  }

  return $OK;
  
}


#------------------------------------------------------------------------------
# Name   : RsyncVerify()
# Purpose: Verify that content in CC view matches source AFS directory
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub RsyncVerify {

  #my ($tgtToolKit, $tgtLevel, $action) = @_;
  my $rc   = 0;
  my $line = "";
  
  print "Verifying content in ClearCase\n";

  # TODO: Need to add a "ct mount /vobs/eda_tksource3" before running the first CC command...
  
  my $rsyncCommand = "$RSYNC -rlcnv";
  $rsyncCommand .= " --delete-excluded";
  $rsyncCommand .= " $compRootDir/14.1/";
  $rsyncCommand .= " $svnSrcDir/14.1";

  my $command = "$CT setview";
  $command .= " -exec";
  $command .= " \"$rsyncCommand\"";
  $command .= " $ccView";

  print "Running $command\n" if ($verbose);
  
  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    my @results = `$command`;
    $rc = $? >> 8;
    
    if ($rc == 0) {
    
      # Check output of rsync command for objects
      foreach $line (@results) {
      
        # Ignore extraneous lines
        next if ($line =~ /^sending incremental file list/);
        next if ($line =~ /^building file list/);
        next if ($line =~ /^sent /);
        next if ($line =~ /^total size is /);
        next if ($line =~ /^\s*$/);
        
        # There is a problem if there are any lines that get this far.
        #   The word "deleting" in error msg means the object exists in the SVN source 
        #   but not in ClearCase.
        print "ERROR: Inconsistency between ClearCase and SVN for $component in Tool Kit $toolKit: $line";
        $rc = $ERROR;
      }
      return $ERROR if ($rc > 0);
    }
    elsif ($rc > 0) {
      print "ERROR: Rsync verification failed.\n";
      print @results;
      return $ERROR;
    }    
  }

  return $OK;
  
}