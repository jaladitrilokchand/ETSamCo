#!/usr/bin/env tclsh
# =============================================================================
#
# Compare contents of prod with contents of corresponding revision in SVN
#
# Usage: scheckout $COMPONENT
#
# Return:  0 on success
#         >0 error
#
#- CHANGE LOG -----------------------------------------------------------------
# 12/08/2011 TSG  Initial coding
# 01/03/2012 GFS  Updated to call getRevisionsTk instead of getRevisions.
# 02/07/2012 GFS  Updated to work in new health check environment.
#==============================================================================

set COMPONENT [ lindex $argv 0 ]
set TMP  /afs/eda/u/stadtlag/public/MySvn2Prod
set SVN  /afs/eda/tools/bin/svn
set LOG_DIR  /afs/eda/data/edainfra/checks/svn2prod
set GJ https://greenjiffy.fishkill.ibm.com/eda/tk
set dirs {.dll* .lib* .bin* dll* lib* bin* Arch-* LEVELHIST Make* .svn }

puts "Starting prod to SVN comparison ...\n"
puts " TMP: $TMP"
puts " SVN: $SVN"
puts " LOG_DIR: $LOG_DIR"
puts " GJ: $GJ"

# Determine the trunk or branch used for the /afs/eda/build working copy
set cmd "exec $SVN info /afs/eda/build/$COMPONENT/14.1 | grep URL"
set rc [ catch { eval $cmd  } error ]
set branch ""
if { $rc == 0} {
  set line [ lindex $error 1]
  set index [ string last $COMPONENT $line ]
  set len [ string length $COMPONENT ]
  set start [ expr {$index + $len + 1} ]
  set branch [ string range $line $start [ string length $line ] ]
} else {
  puts "RC = $rc"
  exit $rc
}
puts "Branch/trunk: $branch";


# Get the revision for prod
puts "Querying ETREE for prod revision ..."
set revision [ exec  /afs/eda/data/edainfra/tools/enablement/prod/bin/getRevisionsTk -c $COMPONENT -l prod -latest ]
puts " Prod revision: $revision"


# Set the output header
puts "Creating results header ..."
set results "<pre>"
lappend results "RUNTIME = [ exec date +%F-%H-%M-%S-%N]"
lappend results "EXCLUDING FROM DIFF = $dirs"
lappend results "REVISION IN PROD = $revision"


# Get contents of SVN for this component and prod revision
puts "Prepping tmp directories ..."
if { ![ file exists $TMP ] } {
  exec mkdir $TMP
}
if { ![ file exists $TMP/$COMPONENT ] } {
  exec mkdir $TMP/$COMPONENT
}
if { [ file exists $TMP/$COMPONENT/14.1 ] } {
  exec rm -rf $TMP/$COMPONENT/14.1
}
puts  "Exporting from SVN ..."
exec $SVN checkout $GJ/$COMPONENT/$branch@$revision $TMP/$COMPONENT/14.1


# Diff each directory 
puts "Running diff ..."
set cmd " exec diff -r --brief "
foreach dir $dirs {
  lappend cmd --exclude $dir
}

lappend cmd  /afs/eda/prod/$COMPONENT/14.1 $TMP/$COMPONENT/14.1


# Prepare the log directory/files
puts "Prepping log dirs ..."
if { ![file exists $LOG_DIR ] } {
  file mkdir $LOG_DIR
}

set PASS "$LOG_DIR/$COMPONENT_PASS.html"
set FAIL "$LOG_DIR/$COMPONENT_FAIL.html"
file delete $PASS
file delete $FAIL


# Log differences
puts "Writing results ..."
set rc [ catch { eval $cmd  } error ]
if { $rc > 0 } {

  set lines [ split $error \n ]
  set lines [ lrange $lines 0 end-1 ]
  set lines [ lsort $lines ]
  if { [ string first "Files "  [ lindex $lines 0 ] ] == 0  &&
       [ string first " differ" [ lindex $lines 0 ] ] != -1  } {
    set rc 2
  } else {
    set rc 1
  }
  lappend results "RC = $rc"
  foreach line [ lsort $lines ] {
    lappend results $line
  }
} else {
  lappend results "RC = $rc"
}


# Write the output
puts $results
if { $rc == 2 } {
  puts "\nLog = $FAIL"
} else {
  puts "\nLog = $PASS"
}
