#!/usr/bin/perl
# =============================================================================
#
#    FILE: check.master
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Eric Hull
#    DATE: 02/16/2012
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 02/16/2012 EH  Initial coding.
# 02/18/2012 EH  Reduced number of messages in output.
# 02/18/2012 EH  Corrected datetime stamp in messages.
# 02/22/2012 GS  Added support for comments in the data file & new data format.
# 03/09/2012 GS  Updated have the data file passed in on the command line and
#                read necessary parameters from that file.
# 03/12/2012 GS  Updated call the check.genHtml to reflect new usage.
# 03/19/2012 GS  Added support for new data fields - script name and param
# 02/19/2013 GS  Updated to drive off the release and location (14.1 build)
#                which makes this process less labor intensive at AGTS time
#                Added verbose and debug for testing.
# =============================================================================

use warnings;
use strict;
use Getopt::Std;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");
use File::Path;

# Define custom perl libs path and modules
use lib '/afs/eda/data/edainfra/tools/enablement/dev/libperl';
use IcofFile;
use TKutils;
use HealthChecks;

# Global variables
my $BIN  = "/afs/eda/data/edainfra/tools/enablement/dev/bin";
my $OK    = 0;
my $ERROR = 8;

# Program variables
my $appName = "check.master";

# Program arguments
my $help      = "";
my $release   = "";
my $location  = "";
my $debug     = 0;
my $verbose   = 0;

# Generic application variables
my @tokens = ();
my $entry  = "";

# Program's global return code - initialize to ERROR
my $progRC  = $ERROR;


#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Define the current directory
my $startDir = $ENV{"PWD"};

# To exit cleanly from a Ctrl+C or an unexpected die()
$SIG{'INT'} = sub { handleInterruption(); exit($ERROR); };
$SIG{'QUIT'} = sub { handleInterruption(); exit($ERROR); };
$SIG{__DIE__}  = sub { handleInterruption(); };

# Read the command line arguments
$progRC = processArgs();
exit $ERROR if ($progRC == $ERROR);

# Read the input file
my $dataFile  = HealthChecks::GetDataFile($release, $location);
my @contents = ();
if (HealthChecks::ReadDataFile($dataFile, \@contents) != $OK) {
  exit $ERROR;
}

# Determine the TK from this location
my $toolKit = "";
if (HealthChecks::GetToolKit($release, $location, 0, \$toolKit) != $OK) {
  exit $ERROR;
}

# Get list of health checks and run each one
my $command;
my @results;
my $rc;
foreach $entry (@contents) {

  # Skip if not a CHECK entry
  next if ($entry !~ /^CHECK/);

  @tokens = split(/;/, $entry);
  my $checkName = $tokens[1];
  my $runCheck = $tokens[4];
  my $script = $tokens[8];
  $script .= " -l $location";
  print "Health Check Script: $script\n";

  # Don't execute health check if Run Check == NO
  if (uc($runCheck) eq "NO") {
    print "Skipping execution of $checkName \n";
    next;
  }

  # Execute the health script
  $command = "$BIN/$script";
  $command .= " -t $toolKit 2>&1 > /dev/null";
  $rc = TKutils::RunCommand($command, \@results, $debug, $verbose);

}


# Create health check report
$command = "$BIN/check.genHtml";
$command .= " -r $release -l $location 2>&1 > /dev/null";
$rc = TKutils::RunCommand($command, \@results, $debug, $verbose);


exit $OK;


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {
  print "\n[$appName] Caught interruption - Exiting with a cleanUp\n";
  chdir($startDir);
}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
This script runs EDA Tool Kit release health checks. Once all health checks
are complete check.genHtml is run to summarize results.

Health Check data dir  : /afs/eda/data/edainfra/tools/enablement/dev/data
Health Check data files: HealthCheck_14.1_build.data
                         HealthCheck_14.1_shipb.data
                         HealthCheck_14.1_tkb.data
";

  my $syntax = "
SYNTAX:
  $appName <-r release> <-l location> [-d] [-y] [-h]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  release  = Tool Kit release name (14.1, 15.1 ...)
  location = Location to check against (build, shipb or tkb)
  -d         Debug mode ... don't actually execute commands
  -y         Verbose mode
  -h         (optional) application help
";

  print $progDescription;
  print $syntax;
  print $where;
}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('rel|r=s'    => \$release,
	      'loc|l=s'    => \$location,
	      'debug|d'    => \$debug,
	      'verbose|y'  => \$verbose,
	      'help|h|?'   => \$help) || return $ERROR;

  # If help requested, show usage
   if ($help) {
     printHelp();
     return $ERROR;
   }

  # Validate required input
  if (! $release) {
    print "ERROR: Release (-r) is a required parameter\n";
    return $ERROR;
  }
  if (! $location) {
    print "ERROR: Location (-l) is a required parameter\n";
    return $ERROR;
  }

  return $OK;

}


