#!/usr/bin/perl
# =============================================================================
#
#    FILE: svn2cc.chgCcFileType
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Eric Hull
#    DATE: 12/20/2012
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 12/20/2012 EH  Initial coding.
# 06/26/2013 EH  Improved comments.
# =============================================================================

use warnings;
use strict;
use Getopt::Std;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");

# Global variables
my $CT            = "/opt/rational/clearcase/bin/cleartool";
my $RSYNC         = "/usr/bin/rsync";

# Program variables
my $appName = "svn2cc.chgCcFileType";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $help         = "";
my $verbose      = 0;
my $toolKit      = "";
my $noCmdExec    = 0;
my $component    = "";
my $ccView       = "";
my $compRootDir  = "";
my $svnSrcDir    = "";
my @lscoFiles    = ();
my $file         = "";

# Return codes
my $OK    = 0;
my $ERROR = 8;

# Generic application variables
my @tokens = ();
my $entry  = "";
my $rc  = $ERROR;
my $startDir = $ENV{"PWD"};
my $progRC = "";

#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Deal nicely with unexpected exits
$SIG{'INT'}   = sub { handleInterruption(); };
$SIG{'QUIT'}  = sub { handleInterruption(); };
$SIG{__DIE__} = sub { handleDIE(); };


# Read the command line arguments
$progRC = processArgs();
if ($progRC == $ERROR) {
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}

# Identify files that are checked out from ClearCase.
#   It is assumed that someone has already verified that these files have failed
#   an attempt to check them in because they need to have their ClearCase file
#   type changed to "compressed_type".
$rc = ListCheckOutFiles();
if ($rc > 0) {
  CleanExit("ERROR: Listing of checked out files failed.", $ERROR);
}

# Iterate through each file that is not checked in
foreach $file (@lscoFiles) {

  # Change ClearCase file type to "compressed_file"
  $rc = ChangeFileType($file);
  if ($rc > 0) {
    CleanExit("ERROR: Change ClearCase file type failed.", $ERROR);
  }
  
  # Checkin file
  $rc = CheckInFile($file);
  if ($rc > 0) {
    CleanExit("ERROR: Checkin of file to ClearCase failed.", $ERROR);
  }
}

# Verify content in ClearCase
$rc = RsyncVerify();
if ($rc > 0) {
  CleanExit("ERROR: Verification of content in ClearCase failed.", $ERROR);
}

CleanExit("Application complete", $OK);


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {
  CleanExit("\n[$appName] Caught interruption - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : handleDIE()
# Purpose: To handle an unexpected die().
# RCs    : none
#------------------------------------------------------------------------------
sub handleDIE {
  CleanExit("\n[$appName] Caught an unexpected die - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : cleanup($message, $rc)
# Purpose: Performs any applicatin clean up and exits with rc
# RCs    : none
#------------------------------------------------------------------------------
sub CleanExit {
  my ($message, $rc) = @_;
  print "$message\n";
  print "Return code: $rc\n";
  chdir($startDir) if (defined($startDir));
  exit $rc;
}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
This script identifies files that are currently checked out and changes the 
ClearCase file type for each of these files to compressed_type.

It is assumed that someone has already verified that these files have failed
an attempt to check them in because they need to have their ClearCase file
type changed to compressed_type.

After the file type is changed, each file is checked in.

After all of the files for the current component have been processed, the 
rsync command is used to verify that the ClearCase files for this component
are the same as the files in the source location.

Before running this script, do the following:

  Login to BTV machine with svnlib BTV AFS ID

  newgrp ccaes (if ccaes is not already the primary group)

  ct setview edatk<tool kit version>

  If necessary, set an activity:

    ct setact <activity-selector> (if necessary)
";

  my $syntax = "
SYNTAX:
  $appName <-t tool_kit> <-c component> [-h] [-y]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  tool_kit = Tool Kit version (ie, 14.1.1, 14.1.2 ...
  component = Tool Kit component (ie, hdp, pet ...
  -h         (optional) application help
  -y         (optional) Verbose
";

  print $progDescription;
  print $syntax;
  print $where;
}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('tk|t=s'     => \$toolKit,
              'component|c=s' => \$component,
              'y'          => \$verbose,
              'help|h|?'   => \$help) || return $ERROR;

  # If help requested, show usage
   if ($help) {
     printHelp();
     return $ERROR;
   }

  # Validate required input
  if (! $toolKit) {
    print "ERROR: Tool Kit (-t) is a required parameter\n";
    return $ERROR;
  }

  if (! $component) {
    print "ERROR: Component (-c) is a required parameter\n";
    return $ERROR;
  }
  
  $ccView    = "edatk" . $toolKit;
  $compRootDir = "/vobs/eda_tksource3/$component";
  $svnSrcDir = "/afs/eda/data/edainfra/svn2cc/tk$toolKit/$component";
  
  return $OK;

}


#------------------------------------------------------------------------------
# Name   : ListCheckOutFiles()
# Purpose: List files for the specified component that are not checked in.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub ListCheckOutFiles {

  my $rc = 0;
  
  print "List $component files that are not checked in to ClearCase.\n";

  # TODO: Add a "ct mount /vobs/eda_tksource3" before running the first CC command.

  my $lscoCmd = "$CT lscheckout";
  $lscoCmd .= " -short";
  $lscoCmd .= " -recurse";
  $lscoCmd .= " $compRootDir/14.1";
  
  my $command = "$CT setview";
  $command .= " -exec";
  $command .= " \"$lscoCmd\"";
  $command .= " $ccView";

  print "  Running $command\n" if ($verbose);
  
  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    my @results = `$command`;
    $rc = $? >> 8;
    
    print @results; # DEBUG
    
    if ($rc > 0) {
      print "ERROR: ct lscheckout command failed\n";
      print @results;
      return $ERROR;
    }
    else {
      chomp(@lscoFiles = @results);
      
      # TODO: Print a "no checked out files" msg if @lscoFiles is empty. 
      
    }
  }

  return $OK;
  
}


#------------------------------------------------------------------------------
# Name   : ChangeFileType($file)
# Purpose: Change ClearCase file type of specified file.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub ChangeFileType {

  my ($file) = @_;
  my $rc = 0;
  my $noCmdExec = 0; # DEBUG
  
  print "Changing ClearCase file type of $file to compressed_type.\n";

  # TODO: Need to add a "ct mount /vobs/eda_tksource3" before running the first CC command...

  my $chtypeCmd = "$CT chtype";
  $chtypeCmd .= " -f";
  $chtypeCmd .= " compressed_file";
  $chtypeCmd .= " $file";
  
  my $command = "$CT setview";
  $command .= " -exec";
  $command .= " \"$chtypeCmd\"";
  $command .= " $ccView";

  print "  Running $command\n" if ($verbose);
  
  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    my @results = `$command`;
    $rc = $? >> 8;
    
    print @results; # DEBUG
    
    if ($rc > 0) {
      print "ERROR: ct chtype command failed\n";
      print @results;
      return $ERROR;
    }
  }

  return $OK;
  
}


#------------------------------------------------------------------------------
# Name   : CheckInFile($file)
# Purpose: Checkin the specified file to ClearCase.
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub CheckInFile {

  my ($file) = @_;
  my $rc = 0;
  my $noCmdExec = 0; # DEBUG
  
  print "Checking in $file to ClearCase.\n";

  # TODO: Need to add a "ct mount /vobs/eda_tksource3" before running the first CC command...

  my $checkInCmd = "$CT checkin";
  $checkInCmd .= " -nc";
  $checkInCmd .= " $file";
  
  my $command = "$CT setview";
  $command .= " -exec";
  $command .= " \"$checkInCmd\"";
  $command .= " $ccView";

  print "  Running $command\n" if ($verbose);
  
  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    my @results = `$command`;
    $rc = $? >> 8;
    
    print @results; # DEBUG
    
    if ($rc > 0) {
      print "ERROR: ct checkin command failed\n";
      print @results;
      return $ERROR;
    }
  }

  return $OK;
  
}


#------------------------------------------------------------------------------
# Name   : RsyncVerify()
# Purpose: Verify that content in CC view matches source AFS directory
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub RsyncVerify {

  my $rc   = 0;
  my $line = "";
  
  print "Verifying content in ClearCase\n";

  # TODO: Need to add a "ct mount /vobs/eda_tksource3" before running the first CC command...
  
  my $rsyncCommand = "$RSYNC -rlcnv";
  $rsyncCommand .= " --delete-excluded";
  $rsyncCommand .= " $compRootDir/14.1/";
  $rsyncCommand .= " $svnSrcDir/14.1";

  my $command = "$CT setview";
  $command .= " -exec";
  $command .= " \"$rsyncCommand\"";
  $command .= " $ccView";

  print "  Running $command\n" if ($verbose);
  
  # Skip command execution if the -k option was specified
  unless ($noCmdExec) {
    my @results = `$command`;
    $rc = $? >> 8;
    
    if ($rc == 0) {
    
      # Check output of rsync command for objects
      foreach $line (@results) {
      
        # Ignore extraneous lines
        next if ($line =~ /^sending incremental file list/);
        next if ($line =~ /^building file list/);
        next if ($line =~ /^sent /);
        next if ($line =~ /^total size is /);
        next if ($line =~ /^\s*$/);
        
        # There is a problem if there are any lines that get this far.
        #   The word "deleting" in error msg means the object exists in the SVN source 
        #   but not in ClearCase.
        print "ERROR: Inconsistency between ClearCase and SVN for $component in Tool Kit $toolKit: $line";
        $rc = $ERROR;
      }
      return $ERROR if ($rc > 0);
    }
    elsif ($rc > 0) {
      print "ERROR: Rsync verification failed.\n";
      print @results;
      return $ERROR;
    }    
  }

  return $OK;
  
}