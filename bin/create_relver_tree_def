#!/usr/bin/env perl
use warnings;
#use strict;
#=============================================================================
#    FILE: create_relver_tree_def
#
# CREATOR: Art Magnan
#    DEPT: AZYX
#    DATE: 03/10/2011
#
# OUTPUTS:
#
# RETURN CODES: 0 = OK
#               8 = error
#
#-PURPOSE---------------------------------------------------------------------
# Create the AFS component/release tree definition file to drive the 
# get_vols_tkrepos code to create component/release volume for
# /afs/eda/tk14.1.{n}/{component}/14.1
#
#-CHANGE LOG------------------------------------------------------------------
# 03/10/2011 AM  Initial version
#                Look for FIX comments that work around limitations for now.
# 03/25/2011 AM  Added -f switch to input the definition file (path/name)
# 04/01/2011 AM  Updated to check for component/release treetop existence and
#                if exists, not include that component/release in the volume 
#                creation.
# 04/18/2011 AM  Updated to validate the component existence in the CM DB.
#                Updated scriptPath to use the main DEV and PROD tool development areas.
# 05/13/2011 AM  Changed all references to btv/edainfra to eda/edainfra for SVN migration.
# 07/18/2011 AM  Updated to implement new volume creation scheme. One volume created
#                per component/release.
# 07/19/2011 AM  Added TK version path to output path statement.
# 08/08/2011 AM  Updated to use the external component definition files. Handled by
#                subroutines added to TkCommon Perl module.
# 08/22/2011 AM  Updated to use the "full_TK" keyword with the -c switch. This will
#                cause a full TK version tree to be created based on the component definition
#                file for this TK version.
# 12/19/2011 AM  Updated to read the component definition from the CM DB.
# 04/12/2012 EH  Changed $topCodePath from /afs/eda/u/amagnan to /afs/eda/data
# 08/06/2012 EH  Disabled use of $valid_tkVersion which broke when 14.1.build version
#                was introduced.
# 08/06/2012 EH  Fixed $volName and $verPath that were broken by last change.
#=============================================================================
#=============================================================================
#			       FUNCTIONS and SUBROUTINES
#=============================================================================
sub help {
	print "\nScript to create the definition file for the release version trees under /afs/eda/tkrepos.\n";
	print "\nUsage:  create_relver_tree_def -t <release version> [-c <component>] [-h] [-d]\n";
	print "\nInput parameters:\n";
	print "  -h [this help]\n";
	print "  -t <EDA Toolkit release version> e.g. 14.1.{n}\n";
	print "  -c <component_name> or \"full_TK\" for all components.\n";
	print "  -d [Development Mode ON]\n";
  print "  -f <filename of tree definition file>\n";
	print "\nNOTES:\n";
	print "  1) Only the EDA Toolkit release version is required.\n";
	print "  2) If a component is specified, only the single component/release tree will be created.\n";
	print "  3) If no component is specified, the release version mount point and all component/release \n";
	print "     trees defined for that release version will be created.\n\n";
	exit 1;
}

sub process_cmd_line {

  # --------------------------------------------------------------
  # Description  : This routine processes command line parameters
  # Parms defined:  -c <component_name; e.g. einstimer>
  #                 -d [Development Mode ON]
  #                 -f <filename of tree definition file>
  #                 -h [help]
  #                 -t <EDA Toolkit release version> e.g. 14.1.{n}
  # -------------------------------------------------------------- 
  getopts('c:df:ht:');

  $compName   = "$opt_c";
  $devMode    = "$opt_d";
  $volDefFile = "$opt_f";
  $tkVersion  = "$opt_t";

  if ($devMode) {
		print "\n\n------------------------------------------------ \n";
		print " Parms Read By Program: \n";
		print " $0\n";
		print "------------------------------------------------ \n";
    print "TK Version      = \"$tkVersion\"\n";
    print "Component name  = \"$compName\" \n";
    print "Dev Mode        = \"$devMode\"  \n";
    print "Definition File = \"$volDefFile\" \n";
    print "------------------------------------------------ \n\n";
  }
	if ($opt_h) {help;}
} # process_cmd_line

sub create_timestamp {
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);

  $year = $year + 1900;
  $month = $mon + 1;

  $date_now = $month . "/" . $mday . "/" . $year;

  if ($min < 10) {
    $newmin = "0" . $min;
  }
  else {
    $newmin = $min;
  }
  $time_now = $hour . ":" . $newmin;
}

sub create_volname {
	# Create the volume name from the TK version
  my ($version) = @_;
  print "Version: \"$version\"\n";
  @ver = split (/\./, $version);
  $volname = "tk" . "$ver[0]" . "$ver[1]" . "_$ver[2]";
  print "Maps to volume: $volname\n";
  return ($volname);
}

#============================================================================================
#					MAIN ROUTINE
#============================================================================================
use Env;
use Getopt::Std;
use lib '/afs/eda/data/edainfra/tools/enablement/dev/libperl';
use TkCommon;

$sysRC = 0;
$compCnt = 0;       # Counts the number of components.
$failCnt = 0;       # Counts the number of components that failed.
$userID = $LOGNAME;

$topDataPath = "/afs/eda";
$topCodePath = "/afs/eda/data";
#$topCodePath = "/afs/eda/u/amagnan";

$dbType = "";       # defaults to production CM DB

my $compList;

# Pass target host from command line
process_cmd_line;

# Make sure the release version is provided and defined in CM DB
if ($tkVersion eq "") {
  print "\nERROR: You must specify the EDA Toolkit release version in format 14.1.{n} with -r switch.\n\n";
  exit 8;
} else {
  if ($devMode) {
		$scriptPath = "${topCodePath}/edainfra/tools/enablement/dev/bin";
	} else {
		$scriptPath = "${topCodePath}/edainfra/tools/enablement/prod/bin";
	}

	#
	# We only want to run this script on TK version tree areas being created
  # in preparation for the AGTS milestone - so will be creating the TK version
  # associated with the DEVELOPMENT Track (Build / Dev / Prod).
  # Currently, no TK release version avail for "ship" area - it is assigned
	# to "development" area and only one can be assigned. For now, I will use
	# the one assigned to "development" area to seed the process.
	#
	#$valid_tkVersion = `$scriptPath/getToolKits -r 14.1 -s development -q $dbType`;
  #chomp ($valid_tkVersion);

  #if ($tkVersion ne $valid_tkVersion) {
	#	print "ERROR: Invalid EDA TK version, $tkVersion, was input via the -t switch.\n";
	#	print "       Valid EDA TK version is $valid_tkVersion.\n";
  #  print "       You want to be creating a TK version tree for the DEVELOPMENT track version at this time.\n";
  #  exit 8;
	#}  else {
  #  $volName = "";
	   $volName = create_volname ("$tkVersion");
	   print "Volume name: $volName\n";
     $verPath = "tk${tkVersion}";
	#}
}

# Ensure the -c switch has a value
if ($compName eq "") {
  print "\nERROR: You must specify either a single component name associated with EDA Toolkit release version $tkVersion or the \"full_TK\" keyword with the -c switch.\n\n";
  exit 8;
}

#
# Define the component attributes used to extract the TK version-specific component definition
#
$compDef = "DELIVERED,BUILD_SUPPORT,TEST_SUPPORT";
print "Using component definition: \"$compDef\"\n";

#
# Determine if this is a full release version tree or single component/release creation
# Either a single component name or "full_TK" keyword is specified with -c switch
#
if ($compName eq "full_TK") {
  $mode = "all";
  $modeText = "All defined in TK version";
} else {
	$mode = "single";
  $modeText = "$compName";
	
	# Is component in CM DB?    Abort, if not.
	$valid_comp = `$scriptPath/validateRelComp -r 14.1 -c $compName $dbType`;
	chomp ($valid_comp);
	$sysRC = $? >> 8;
	
	if ($sysRC) {
		print "sysRC: $sysRC \n";
		print "ERROR: Component \"$compName\", input via the -c switch, is not associated with TK version $tkVersion.\n";
		exit 8;
	}	
}

# Set up the volume definition file
unless (open(OUTFILE, ">$volDefFile")) {
	die ("Output file $volDefFile cannot be opened.\n");
}

create_timestamp;
$datetime = "$date_now at $time_now";

# Create the volume definition file header
print OUTFILE ("# COMPONENT/RELEASE VOLUME CREATION Definition File\n");
print OUTFILE ("# Created on $datetime by $userID\n");
print OUTFILE ("#\n");
print OUTFILE ("# Input parameters:\n");
print OUTFILE ("#   TK version           : $tkVersion\n");
print OUTFILE ("#   Components to process: $modeText\n");
print OUTFILE ("#\n");
print OUTFILE ("# Notes:\n");
print OUTFILE ("# If -c is specified, will use reference dir's size, unless FORCE_SIZE is there\n");
print OUTFILE ("# vol and path should be same structure, ie. '.' in vol corresponds to '/' in path.\n");
print OUTFILE ("#\n\n");

# Dependent on mode, attempt to build a full Toolkit version tree or a single component/release tree.
if ($mode eq "all") {
	#
  # Get the list of components that are defined for this release version
	#
	my $cmdbCmd = "${scriptPath}/getComponents -t $tkVersion -ct $compDef -q $dbType";
	$compList = `$cmdbCmd`;
	chomp ($compList);
	$rc = $? >> 8;
	
	if ($rc) {
		print "ERROR: Return code $rc from $cmdbCmd.\n";
		exit $rc;
	} else {
		print " \n";
		print "Component list created. rc=$rc\n";
		if ($DEBUG) {
			print "Results:\n";
			$compCnt = 0;
			foreach $comp (sort split(/,/, $compList)) {
				$compCnt++;
				print "$compCnt) $comp\n";	
			}
		}
	}
	#
	# Create one volume entry for each component/release pair based on the release version definition.
	# If this component/release treetop already exists then do not create an entry.
	#
	foreach $comp (sort split(/,/, $compList)) {
		$compCnt++;
		print "$compCnt) $comp\n";
		
		$treetop = "$topDataPath/${verPath}/$comp/14.1";
		
    if (!(-e "$treetop")) {
			
			# Create the component/release statement
			print OUTFILE ("vol: $volName.$comp   path: $verPath/$comp   size: 20000\n");
		} else {
			print "[INFO]: Directory, $treetop, already exists...so will not be part of the volume creation!\n";
		}
	}
} elsif ($mode eq "single") {
	
	$treetop = "$topDataPath/${verPath}/$compName/14.1";
	
	if (!(-e "$treetop")) {
		
		# Create the component and component/release statements
		print OUTFILE ("vol: $volName.$compName   path: $verPath/$compName   size: 20000\n");
	} else {
		print "[INFO]: Directory, $treetop, already exists...so will not be part of the volume creation!\n";
	}
}
exit $sysRC;
