#!/usr/bin/perl
#
# =============================================================================
#
#    FILE: findCommitDataFiles
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Gregg Stadtlander
#    DATE: 10/18/2011
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 10/18/2011 GS  Initial coding.
# =============================================================================

use warnings;
use strict;
use File::stat;
use Time::localtime;
use Sys::Hostname;

use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");
use File::Path;
use File::Copy;

#
# Global variables
#

# Program name
my $appName = "findCommitDataFiles";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $logDir     = "";
my $key        = "";
my $value      = "";
my $useOld     = 0;
my $verbose    = 0;
my $help       = "";

# Return codes
my $OK        = 0;
my $ERROR     = 8;

# Generic application variables
my $entry = "";
my @tokens = ();


# Program's global return code - initialize to ERROR
my $progRC  = $ERROR;

# Set the location and name of createFuncUpdate application
my $ETREE_BIN = "/afs/eda/data/edainfra/tools/enablement/prod/bin";


#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

#
# Define the current directory
#
my $startDir = $ENV{"PWD"};

#
# To exit cleanly from a Ctrl+C or an unexpected die()
#
$SIG{'INT'} = sub { handleInterruption();
                    exit($ERROR);
                  };

$SIG{'QUIT'} = sub { handleInterruption();
                     exit($ERROR);
                   };

$SIG{__DIE__}  = sub { handleDIE();
                       #exit($ERROR);
                     };

#
# Read the command line arguments
#
$progRC = processArgs();
if ($progRC == $ERROR) {
    #printSyntax();
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}


#
# Define custom perl libs path and modules depending on the
# application mode.
#
use lib '/afs/eda/data/edainfra/tools/enablement/prod/libperl';
use IcofFile;


#
# Display inputs
#
print "Log dir: $logDir\n";
print "Key    : $key\n";
print "Value  : $value\n";


#
# Determine the commit logs
#
my @missing = ();
my @logs = ();
if (! IcofFile::ReadDirToList($logDir, \@logs, 0)) {
    print "ERROR: unable to read the log directory.\n";
    print "       Dir: $logDir\n";
    exit $ERROR;
}


# Scan each log and look for any entry that contains DB_ID.
# Any log that does not contain that entry means the commit did
# not get logged in the ETREE database.
my $fileCount = 0;
my $matchCount = 0;
my $log = "";
foreach $log (sort(@logs)) {

  # Skip if file doesn't start with "post"
  next if ($log !~ /^post/);

  # Skip if file doesn't end with "log"
  next if ($log =~ /log$/);
  $fileCount++;

  # If the commit failed then retry the commit
  my $logFile = "$logDir/$log";
  FindMatch($logFile);
  
}

print "Found $matchCount matches from $fileCount files.\n";

exit $OK;


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {

  print "\n[$appName] Caught interruption - Exiting with a cleanUp\n";
  chdir($startDir);

}  # End of handleInterruption


#------------------------------------------------------------------------------
# Name   : handleDIE()
# Purpose: To handle an unexpected die().
# RCs    : none
#------------------------------------------------------------------------------
sub handleDIE {

  print "\n[$appName] Caught an unexpected die - Exiting with a cleanUp\n";
  chdir($startDir);

}  # End of handleDIE


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
Finds post commit logs that contain the matching key/value pair.
";

  my $syntax = "
SYNTAX:
  $appName <-k key> <-v value> [-o] [-l logDir] [-h] [-y]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  -k Key to search search for
  -v Desired value for key
  -o Use old log directory (/afs/btv/data/edainfra/tools/user/trunk/log).
  -l Log directory [default = /afs/eda/data/edainfra/tools/user/logs].
  -h Application help (optional)
  -y Verbose mode (optional)
";

  print $progDescription;
  print $syntax;
  print $where;

}       # End of printHelp


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('logDir|l=s'      => \$logDir,
	      'old|o'           => \$useOld,
	      'key|k=s'         => \$key,
	      'value|v=s'       => \$value,
              'verbose|y'       => \$verbose,
              'help|h|?'        => \$help
              ) || return $ERROR;


  # If help requested, show usage
  if ($help) {
    printHelp();
    return $ERROR;
  }

  # Verify the obsolete file.
  my $msg = "";
  if (! $logDir) {
    if ($useOld) {
      $logDir = "/afs/btv/data/edainfra/tools.old/user/trunk/log";
    }
    else {
      $logDir = "/afs/eda/data/edainfra/tools/user/logs";
    }
  }
  
  # Verify key and value are set
  if (! $key) {
    $msg .= "A key (-k) must be specified\n";
  }
  if (! $value) {
    $msg .= "A value (-v) must be specified\n";
  }

  # Return
  if ($msg ne "") {
    print $msg;
    return $ERROR;
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : FindMatch()
# Purpose: Read the logFile and determine if this logFile contains a line that
#          matches the key/value pair.
# RCs    : n/a
#------------------------------------------------------------------------------
sub FindMatch {

  my ($logFile) = @_;

  # Read the log file
  my @contents = ();
  if (! IcofFile::ReadFileToList($logFile, \@contents, 0)) {
    print "WARNING: unable to read the log file contents\n";
    print "         File: $logFile\n";
    return 0;
  }
  
  # Ignore if for edadev repository
  return 0 if (grep(/edadev/, @contents));
  
  # Ignore if for gna component
  return 0 if (grep(/ gna /, @contents));
  
  # Process the contents of log file
  foreach $entry (@contents) {

    next if ($entry eq "");
    (@tokens) = split(/ +\|/, $entry);
    next if (! defined $tokens[1]);

    $tokens[1] =~ s/^\s+//;
    chomp $tokens[0];
    chomp $tokens[1];

    #print "Entry : $entry\n";
    #print "Tokens: $tokens[0] and $tokens[1].\n\n";

    if (($tokens[0] =~ /$key/) && ($tokens[1] =~ /$value/)) {
      print "Log: $logFile\n";
      print "  --> $entry\n";
      $matchCount++;
      return;
    }
  }

  return;

}
