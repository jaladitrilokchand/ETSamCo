#!/usr/bin/perl
# =============================================================================
#
#    FILE: mar_link_fix
# CREATOR: Gregg Stadtlander
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 02/13/2014 GS  Initial coding.
# =============================================================================
use warnings;
use strict;
use Getopt::Long qw(:config no_ignore_case);
use Cwd;

use lib '/afs/eda/data/edainfra/tools/enablement/prod/libperl';
#use lib '/afs/eda/data/edainfra/tools/enablement/dev/libperl';
use TKutils;


# Global variables
my $BIN_DIR = "/afs/eda/data/edainfra/tools/enablement/dev/bin";
my $LOGS_DIR = "/afs/eda/data/edainfra/logs";
my $INSTALL = "/afs/eda/projects/eclipz/common/tools/edatools";
#my $INSTALL = "/afs/btv.ibm.com/data/vlsi/eclipz/common/tools/edatools";
#my $INSTALL = "/afs/austin.ibm.com/data/edatools/ptn";
my @PLATS = ( "aix64b", "lin64b_x86" );

my @FILES = ( "libQtCLucene.so.4.5.3",
              "libQtHelp.so.4.5.3",
              "libQtScript.so.4.5.3",
              "libQtXml.so.4.5.3",
              "libQtTest.so.4.5.3",
              "libQtSvg.so.4.5.3",
              "libQtSql.so.4.5.3",
              "libQtOpenGL.so.4.5.3",
              "libQtNetwork.so.4.5.3",
              "libQtGui.so.4.5.3",
              "libQtDesigner.so.4.5.3",
              "libQtDesignerComponents.so.4.5.3",
              "libQtCore.so.4.5.3",
              "libQtAssistantClient.so.4.5.3",
              "libQt3Support.so.4.5.3" );

# Program variables
my $appName = "mar_link_fix";
my $progInvocation = $appName;
foreach (@ARGV) {
  $progInvocation .= " " . $_;
}

# Program arguments
my $help            = "";
my $verbose         = 0;
my $dbMode          = "";  # default is prod if empty
my $dryRun          = 0;
my $toolKit         = "";
my $startDir        = getcwd();
my $component       = "";
my $patch           = -1;

# Return codes
my $OK    = 0;
my $ERROR = 8;

# Generic application variables
my @tokens = ();
my $entry  = "";
my $rc     = $ERROR;


#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Deal nicely with unexpected exits
$SIG{'INT'}   = sub { handleInterruption(); };
$SIG{'QUIT'}  = sub { handleInterruption(); };
$SIG{__DIE__} = sub { handleInterruption(); };

# Read the command line arguments
$rc = processArgs();
if ($rc == $ERROR) {
  print "\n[$appName] Use -h to get more details.\n";
  exit $ERROR;
}


# Process each file
foreach my $platform (@PLATS) {

  # Define the install location
  #  <INSTALL>/tk<TK>/<PLAT>/tk<TK>/tk<TK>.<PATCH>_<PLAT>/<COMP>/14.1
  my $installDir = "$INSTALL/";
  $installDir .= "tk$toolKit/";
  $installDir .= "$platform/";
  $installDir .= "tk$toolKit/";
  $installDir .= "tk$toolKit" . "." . $patch . "_" . "$platform/";
  #$installDir .= "tk$toolKit" . "_volA_" . "$platform/";
  $installDir .= "$component/14.1/tools/qt-64/lib";
  print "Install: $installDir\n";

  if (-e $installDir) {
    chdir($installDir);
  }
  else {
    CleanExit("\nDirectory does not exist\nDir: $installDir", $ERROR);
  }

  my @added = ();
  my $file = "";
  foreach $file (@FILES) {
    print "\n\nFile: $file\n";

    # skip if file doesn't exist
    if (! -e $file) {
      print " --> Target file does NOT exist\n";
      next;
    }

    my $tmpFile = $file;
    $tmpFile =~ s/4\.5\.3/4\.5/g;
    my $dot45 = $tmpFile;
    print " DOT 45 = $dot45\n";

    $tmpFile =~ s/4\.5/4/g;
    my $dot4 = $tmpFile;
    print " DOT 4 = $dot4\n";

    $tmpFile =~ s/\.4//g;
    my $dot = $tmpFile;
    print " DOT = $dot\n\n";

    push(@added, $dot45) if (AddLink($file, $dot45));
    push(@added, $dot4) if (AddLink($file, $dot4));
    if ($platform =~ /lin/) {
      push(@added, $dot) if (AddLink($file, $dot));
    }
  }

  # Show new files
  print "\n";
  if (scalar(@added)) {
    print "Added new files\n";
    print join("\n", @added) . "\n";
  }
  else {
    print "No new files added\n";
  }

}


CleanExit("\nApplication complete", $OK);


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {
  CleanExit("\n[$appName] Caught interruption - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : cleanup($message, $rc)
# Purpose: Performs any applicatin clean up and exits with rc
# RCs    : none
#------------------------------------------------------------------------------
sub CleanExit {
  my ($message, $rc) = @_;

  # Log application end event
  #LogAppEvent("end");

  print "$message\n";
  print "Return code: $rc\n";
  chdir($startDir) if (defined($startDir));
  exit $rc;

}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
Script description here ...
";

  my $syntax = "
SYNTAX:
  $appName <-t tk> <-c component> <-p patch>
                  [-dryrun] [-y] [-db dbMode] [-h]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  tk        = Tool Kit version which must exist (ie, 14.1.1 ...)
  component = Component to process (ie, mar, mar2, mar2_2243)
  patch     = Patch level install version (0, 1, 2 ...)
  -dryrun   = Run script in dryrun mode
  dbMode    = Database mode [default = PROD] (PROD, DEV, TEST)
  -h        = Application usage help
  -y        = Verbose mode
";

  print $progDescription;
  print $syntax;
  print $where;

}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('t=s'       => \$toolKit,
              'c=s'       => \$component,
              'p=i'       => \$patch,
	      'db=s'      => \$dbMode,
	      'dryrun'    => \$dryRun,
	      'y'         => \$verbose,
	      'help|h|?'  => \$help)
    || return $ERROR;

  # If help requested, show usage
  if ($help) {
    printHelp();
    return $ERROR;
  }

  # Validate required input
  if (! $toolKit) {
    print "ERROR: Tool Kit (-t) is a required parameter\n";
    return $ERROR;
  }
  if (! $component) {
    print "ERROR: Component (-c) is a required parameter\n";
    return $ERROR;
  }
  if ($patch < 0) {
    print "ERROR: Patch Level (-p) is a required parameter\n";
    return $ERROR;
  }

  print "Running in DRY RUN mode ...\n" if ($dryRun);

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : AddLink($existing, $link)
# Purpose: Create a link to the existing file
# RCs    : 0 = if existed
#          1 = if didn't exist and was added
#------------------------------------------------------------------------------
sub AddLink {

  my $added = 0;
  my ($existing, $link) = @_;

  my $command = "ln -s $existing";
  if (! -e $link) {
    my $cmd = "$command $link";
    print " Command: $cmd\n";
    $added = 1;
    if (! $dryRun) {
      `$cmd`;
    }
    else {
      print "DRYRUN .. would have run command\n"
    }
  }
  elsif (! -l $link) {
    my $cmd = "$command $link";
    if (! $dryRun) {
      print " Command: $cmd\n";
      unlink($link);
      `$cmd`;
    }
    else {
      print "DRYRUN .. would have removed $link and run command\n"
    }
  }
  else {
    print " $link already exists and is a symlink ...\n";
  }

  return $added;

}
