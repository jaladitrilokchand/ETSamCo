#!/usr/bin/perl
#
# =============================================================================
#
#    FILE: clearShipbAcls
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Gregg Stadtlander
#    DATE: 01/31/2012
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 01/31/2012 GS  Initial coding.
# 01/31/2012 EH  Fixed typo in line with find command (/\ -> \\).
# 01/31/2012 GS  Added system:anyuser list & system:authuser list
# =============================================================================

use warnings;
use strict;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");
use File::Path;

#
# Global variables
#
my $SHIPB   = "/afs/eda/shipb";
my $SHIP   = "/afs/eda/ship";


# Program name
my $appName = "clearShipbAcls";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $release    = "13.1";
my $component  = "";
my $target     = "";
my $help       = "";
my $verbose    = 0;
my $ship       = 0;
my $shipb      = 0;
my $msg        = "";

# Add ids and permissions you want to keep to this list.
my @keepAcls = ("bradmin all",
		"svnlib all",
		"system:administrators all",
                "system:anyuser l", 
		"system:authuser l");

# Return codes
my $OK        = 0;
my $ERROR     = 8;

# Generic application variables
my $entry = "";
my @tokens = ();

# Program's global return code - initialize to ERROR
my $progRC  = $ERROR;

#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

#
# Define the current directory
#
my $startDir = $ENV{"PWD"};

#
# To exit cleanly from a Ctrl+C or an unexpected die()
#
$SIG{'INT'} = sub { handleInterruption();
                    exit($ERROR);
                  };

$SIG{'QUIT'} = sub { handleInterruption();
                     exit($ERROR);
                   };

$SIG{__DIE__}  = sub { handleDIE();
                       exit($ERROR);
                     };

#
# Read the command line arguments
#
$progRC = processArgs();
if ($progRC == $ERROR) {
    #printSyntax();
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}


#
# Define custom perl libs path and modules depending on the
# application mode.
#
use lib '/afs/eda/data/edainfra/tools/enablement/prod/libperl';
use IcofFile;


#
# Create a list of component/directories to work against
#
my @dirs = ();
if (! $component) {
  @dirs = <$target/*/$release>;
}
else {
  push(@dirs, "$target/$component/$release");
}
print join("\n", @dirs) . "\n";

#
# Get confirmation from user
#
print "-------------------------------------------------------------\n";
print "Please confirm you'd like to clear permissions for the above \n";
print "directories. All permissions will be cleared expect those \n";
print "listed below.\n";
print "-------------------------------------------------------------\n";
foreach $entry (@keepAcls) {
  print "  $entry\n";
}

print "\n";
print "Continue? (y/n): ";
my $confirm = <>;
print "\n";

exit if ($confirm !~ m/(y|Y)/);

#
# Set the log file
#
my $date = `date +%Y%m%d`;
chomp $date;
my $time = `date +%H%M%S`;
chomp $time;
my $log = "/afs/eda/data/edainfra/tools/enablement/prod/logs";
$log .= "/$appName.$date.$time.log";

#
# Update the permissions for each directory
#
my $keepers = join(" ", @keepAcls);
open LOG, ">$log" || warn("Unable to open file for writing $!");
foreach $entry (@dirs) {
  print "$entry\n";
  my $command = "find $entry -type d -exec fs sa {} $keepers -clear \\;";
  #print "  Running:  $command\n";
  my @results = `$command`;
  print LOG join("\n", @results) . "\n\n";
}
close LOG;

print "\nLog file: $log\n";

exit $OK;


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {

  print "\n[$appName] Caught interruption - Exiting with a cleanUp\n";
  chdir($startDir);

}


#------------------------------------------------------------------------------
# Name   : handleDIE()
# Purpose: To handle an unexpected die().
# RCs    : none
#------------------------------------------------------------------------------
sub handleDIE {

  print "\n[$appName] Caught an unexpected die - Exiting with a cleanUp\n";
  chdir($startDir);

}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
Clears AFS permissions for all 13.1 ship and shipb directories.
";

  my $syntax = "
SYNTAX:
  $appName < -ship | -shipb > [-c component] [-h] [-y]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  -shipb  Run on /afs/eda/shipb/*/13.1 directories
  -shipb  Run on /afs/eda/ship/*/13.1 directories
  -c      Component (run for a single component)
  -h      Application help (optional)
  -y      Verbose mode (optional)
";

  print $progDescription;
  print $syntax;
  print $where;

}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('shipb'      => \$shipb,
              'ship'       => \$ship,
              'comp|c=s'   => \$component,
              'verbose|y'  => \$verbose,
              'help|h|?'   => \$help
              ) || return $ERROR;


  # If help requested, show usage
  if ($help) {
    printHelp();
    return $ERROR;
  }


  # Verify required parameters
  if (! $shipb && ! $ship) {
    $msg = "ERROR: Either -ship or -shipb is a required parameter\n";
  }
  elsif ($shipb && $ship) {
    $msg = "ERROR: You must specifiy -ship or -shipb but not both\n";
  }
  $target = $SHIPB if ($shipb);
  $target = $SHIP if ($ship);


  # Return
  if ($msg ne "") {
    print $msg;
    return $ERROR;
  }

  return $OK;

}
