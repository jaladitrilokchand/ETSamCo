#!/usr/bin/perl
#
# =============================================================================
#
#    FILE: diffEtreeDevProd
#
# CREATOR: Gregg Stadtlander
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
# CHANGE LOG ------------------------------------------------------------------
# 02/18/2013 GS  Initial coding
# =============================================================================

use warnings;
use strict;
use Cwd;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");
use File::Compare;

# Define custom perl libs path and modules
use lib '/afs/eda/data/edainfra/tools/enablement/dev/libperl';
use TKutils;
use IcofFile;

# Program name
my $appName = "diffEtreeDevProd";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $help       = "";
my $verbose    = 0;

# Return codes
my $OK        = 0;
my $ERROR     = 8;

# Generic application variables
my $entry = "";
my @tokens = ();


# Program's global return code - initialize to ERROR
my $progRC  = $ERROR;

# Set the location and name of createFuncUpdate application
my $SVN = "/afs/btv/data/subversion/bin/svn";
my $EDEV = "/afs/eda/data/edainfra/tools/enablement/dev";
my $EPROD = "/afs/eda/data/edainfra/tools/enablement/prod";


#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Define the current directory
my $startDir = $ENV{"PWD"};

# To exit cleanly from a Ctrl+C or an unexpected die()
$SIG{'INT'} = sub { handleInterruption(); exit($ERROR); };
$SIG{'QUIT'} = sub { handleInterruption(); exit($ERROR); };
$SIG{__DIE__}  = sub { handleInterruption(); };

# Read the command line arguments
$progRC = processArgs();
if ($progRC == $ERROR) {
  #printSyntax();
  print "\n[$appName] Use -h to get more details.\n";
  exit $ERROR;
}


# directories to compare
my @etree = ("bin", "doc", "cgi-bin", "data", "lib", "libperl", "test", 
	     "libx/runtimes", "libx/iipmds",
	     "libx_platform/linux", "libx_platform/aix", "libx_platform/win32",
	     "java/src/com/ibm/stg/eda/app/etree",
	     "java/src/com/ibm/stg/eda/component/jfacebase",
	     "java/src/com/ibm/stg/eda/component/tk_etreebase",
	     "java/src/com/ibm/stg/eda/component/tk_etreedb",
	     "java/src/com/ibm/stg/eda/component/tk_etreeobjs",
	     "java/src/com/ibm/stg/eda/component/tk_levelhist",
	     "java/src/com/ibm/stg/eda/component/tk_patch",
	    );


# For each directory get a list of files in dev and prod.  If same file
# in dev and prod then diff it and report any differences
my $dir;
my %missing;
my @different;
foreach $dir (sort(@etree)) {

  print "Comparing files ... $dir\n";

  # Create lists of dev and prod files
  my @devFiles;
  my @prodFiles;
  exit $ERROR if (GetFiles($EDEV, $dir, \@devFiles) != $OK);
  exit $ERROR if (GetFiles($EPROD, $dir, \@prodFiles) != $OK);

  # Get differences
  CompareDirs(\@devFiles, \@prodFiles, \%missing, \@different);

}

ShowMissing(%missing);
ShowDifferences(@different);

exit $OK;


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {

  print "\n[$appName] Caught interruption - Exiting with a cleanUp\n";
  chdir($startDir);

}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
Compare files in ETREE's dev and prod /afs/eda/edainfra/tool/enablement
directories.
";

  my $syntax = "
SYNTAX:
  $appName [-h] [-y]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  -h Application help (optional)
  -y Verbose mode (optional)
";

  print $progDescription;
  print $syntax;
  print $where;

}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('verbose|y'       => \$verbose,
              'help|h|?'        => \$help
              ) || return $ERROR;


  # If help requested, show usage
  if ($help) {
    printHelp();
    return $ERROR;
  }

  # Return
  my $msg = "";
  if ($msg ne "") {
    print $msg;
    return $ERROR;
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : GetFiles($baseDir, $subDir, \@files)
# Purpose: Create a list of files in the specified directory
# RCs    : $OK or $ERROR
#------------------------------------------------------------------------------
sub GetFiles {

  my ($baseDir, $subDir, $ref_files) = @_;

  # Return if directory not found
  my $location = "$baseDir/$subDir";
  if (! -d $location) {
    @$ref_files = ();
    print "ERROR: directory does not exist\n";
    print "       Dir: $location\n";
    return $OK;
  }

  # Read the directory contents file
  my @contents = ();
  if (! IcofFile::ReadDirToList($location, \@contents, 0)) {
    print "ERROR: unable to read directory even though it exists\n";
    print "       Dir: $location\n";
    return $ERROR;
  }

  # Remove .svn dirs
  my $file = "";
  foreach $file (@contents) {
    next if ($file =~ /^\.svn/); # Ignore .svn dirs
    push(@$ref_files, "$subDir/$file");
  }

  if ($verbose) {
    print "==================\n";
    print "Contents - $baseDir\n";
    print "------------------\n";
    print join("\n", @$ref_files), "\n";
    print "==================\n";
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : CompareDirs(\@devFiles, \@prodFiles, \%missing, @different);
# Purpose: Read roles from the ETREE DB for the specified release and component
#          and load the hash with role/intranet id pairs
# RCs    : $OK or $ERROR
#------------------------------------------------------------------------------
sub CompareDirs {

  my ($ref_devFiles, $ref_prodFiles, $ref_missing, $ref_different) = @_;

  # Find dev files missing in prod and compare common files
  my $file;
  my @common = ();
  foreach $file (@$ref_devFiles) {
    if (! grep(/^$file$/, @$ref_prodFiles)) {
      print "Missing from PROD - $file\n" if ($verbose);
      AddToHashedList("PROD", $file, $ref_missing);
      next;
    }
    if (IsDifferent($file)) {
      print "Different - $file\n" if ($verbose);
      push(@$ref_different, $file);
    }
  }

  # Find prod files missing in dev
  foreach $file (@$ref_prodFiles) {
    if (! grep(/^$file$/, @$ref_devFiles)) {
      print "Missing from DEV - $file\n" if ($verbose);
      AddToHashedList("DEV", $file, $ref_missing);
    }
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : IsDifferent($file)
# Purpose: Compares $file in prod and dev looking for differences
# RCs    : 0 if files match
#          1 if file differ
#------------------------------------------------------------------------------
sub IsDifferent {

  my ($file) = @_;

  my $devFile = "$EDEV/$file";
  my $prodFile = "$EPROD/$file";
  if (compare($devFile, $prodFile) == 0) {
    return 0;
  }

  return 1;

}


#------------------------------------------------------------------------------
# Name   : ShowMissing(%missing)
# Purpose: Displays which files are missing from dev and prod directories
# RCs    : n/a
#------------------------------------------------------------------------------
sub ShowMissing {

  my (%missing) = @_;

  my $key;
  foreach $key (keys(%missing)) {
    print "\nFiles missing from $key \n";
    print "-------------------------\n";
    my $ref_list = $missing{$key};
    print join("\n", @$ref_list) . "\n";
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : ShowDifferences(@diffFiles)
# Purpose: Displays which files are difference between dev and prod directories
# RCs    : n/a
#------------------------------------------------------------------------------
sub ShowDifferences {

  my (@diffs) = @_;

  if (scalar(@diffs)) {
    print "\nFiles difference between DEV and PROD\n";
    print "----------------------------------------\n";
  }
  print join("\n", @diffs) . "\n\n";

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : AddToHashedList($key, $value, $ref_hash)
# Purpose: The hash is a key/ref_list pair, add the new value to the list
#          defined by key
# RCs    : n/a
#------------------------------------------------------------------------------
sub AddToHashedList {

  my ($key, $value, $ref_hash) = @_;

  if (! exists($$ref_hash{$key})) {
    my $ref_list = [ $value ];
    $$ref_hash{$key} = $ref_list;
  }
  else {
    my $ref_list = $$ref_hash{$key};
    if (! grep(/^$value$/, @$ref_list)) { # add value if not in list
      push(@$ref_list, $value);
    }
    $$ref_hash{$key} = $ref_list;
  }

  return $OK;

}



