#!/usr/bin/env perl
#use warnings;
#use strict;
#=============================================================================
#    FILE: doTK_fromDB
#
# CREATOR: Art Magnan
#    DEPT: AZYX
#
# RETURN CODES: 0 = OK
#               8 = error
#
#-PURPOSE---------------------------------------------------------------------
# Execute a command, fed from the command line, across all components defined
# for a specific Toolkit version and having a particular set of attributes.
#
#-CHANGE LOG------------------------------------------------------------------
# 11/09/2011 AM  Initial version
#=============================================================================
#=============================================================================
#			       FUNCTIONS and SUBROUTINES
#=============================================================================
sub help {
        print "\nScript to execute a command from command line, across all components defined for a specific Toolkit version and having a particular set of attributes.";
        print "\nUsage:  doTK_fromDB -t <Toolkit version> -a <component attrib types> [-d] [-g] [-h]\n";
        print "\nInput parameters:\n";
				print "  -t <EDA Toolkit release version> e.g. 14.1.{n}\n";
				print "  -a <component definition attributes>   e.g. DELIVERED,BUILD_SUPPORT,TEST_SUPPORT,32-BIT \n";
        print "  -d [Development Mode ON]\n";
				print "  -g [Test mode ON - will see what would execute.]\n";
				print "  -h This help\n";
        print "\nNOTES:\n";
        exit 1;
} # end help

sub process_cmd_line {
	#
  # ---------------------------------------------------------------------
  # Description  : This routine processes command line parameters
  # Parms defined:  -t <Toolkit version;  e.g. 14.1.0>
  #                 -a <component definition attributes>
  #                 -d [Development Mode ON - using code from DEV area]
  #                 -g [Test mode ON - will see what would execute.]
  #                 -h [help]
	#                 -i [<ref_release> e.g. 13.1 directory definition used 
	#                     to create 14.1 base component directories]
	#                 -C [Clean existing symlinks mode ON]
  # ---------------------------------------------------------------------
	getopts('a:dght:');
	
  $tkVersion    = "$opt_t";
  $compAttrList = "$opt_a";

  # Set DEVMODE
	if ( ${opt_d} ) {
		$devMode = 1;
	}
	else {
		$devMode = 0;
	}

	# Set DEBUG mode
	if ( ${opt_g} ) {
		$DEBUG = 1;
	}
	else {
		$DEBUG = 0;
	}
	
	# Display help if requested
	if ( ${opt_h} ) { help(); }

} # end process_cmd_line

sub check_userID {
	#
	# AFS ID svnlib must be used to execute this script
	#
	my ($userID, $debug, @authID) = @_;
  my ($found) = 1;
	
	foreach $id (@authID) {
		if ($debug) {
			print "userID: \"$userID\"  authID: \"$id\"\n";
		}
		if ( $userID eq $id ) {
			$found = 0;
			last;
		}
	}
  return ($found);
} # end check_userID

sub create_timestamp {
	#
	# Get date and time info from system
	#
	
	@months = qw(jan feb mar apr may jun jul aug sep oct nov dec);
	
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	
  $year = $year + 1900;
	
	$month = $mon + 1;
  $monthName = $months[$mon];
	$monthDay = $monthName . $mday;
	
  $date_now = $month . "/" . $mday . "/" . $year;
	
  if ($min < 10) {
    $newmin = "0" . $min;
  }
  else {
    $newmin = $min;
  }
  $time_now = $hour . ":" . $newmin;	
} # end create_timestamp

sub log_execution {
	#
	# Define the logging, execution timestamps
	#
	my ($when, $compType) = @_;
	my $tkVer = "";
	
	if ($when eq "start") {

    # Convert tkVersion for use in log file name
    $tkVer = TkCommon::convert_tkVersion ($tkVersion, "selfstore");

		# Set up the log file
		create_timestamp;
		$datetime = "$date_now at $time_now";

		$logTop  = "/afs/eda/u/svnlib/logs/${monthName}";
		if (! -d $logTop) {
			`mkdir -p $logTop`;
		}
		$logFile = "$logTop/${monthDay}.${compType}.${tkVer}.${scriptName}";
		unless (open(STDOUT, "| tee -ai $logFile")) {
			die ("Output file $logFile cannot be opened.\n");
		}
		
		# Log the start time
		print ("#\n");
		print ("# $fullScrName started at $datetime by $userID\n");
		print ("#\n");
		
	} elsif ($when eq "end") {

		create_timestamp;
		$datetime = "$date_now at $time_now";
		
		# Log the end time
		print ("#\n");
		print ("# $fullScrName ended at $datetime by $userID\n");
		print ("#\n");
		
	} else {
		print "ERROR: log_execution: Can't figure out when I need to log!\n";
	}
} # end log_execution

#============================================================================================
#					MAIN ROUTINE
#============================================================================================
use Env;
use Getopt::Std;
use File::Path qw(mkpath) ;
use Cwd;
use lib '/afs/eda/data/edainfra/tools/enablement/dev/libperl';
use TkCommon;

#$codePath = "/afs/eda/data";
$codePath = "/afs/eda/u/amagnan";

our $scriptName = "doTK_fromDB";
our $fullScrName = $0;
our $rc = 0;
our $maxRC = 0;
our $dbType="";
our %valid_attrs = map {$_ => 1} qw(DELIVERED BUILD_SUPPORT TEST_SUPPORT 32-bit);

my $compList;
my $compAttr;
my $compCnt = 0;
my $badCnt = 0;
my $comp;
my $compRel;

# Only AFS ID svnlib should run this script!!!
our $rlseID = "svnlib";
our $userID = $LOGNAME;
my (@authID) = ($rlseID);
$rc = check_userID ($userID, 0, @authID);
if ($rc) {
  print "\nERROR: You MUST run this script as AFS ID \"@authID\" to manage the locks!!!\n\n";
  exit 8;
} else {
	print "\nINFO: Running script using authorized AFS ID.\n\n";
}

# Process parms from command line
process_cmd_line;

# Make sure the required parameters are provided
if ($tkVersion eq "") {
  print "\nERROR: Missing Toolkit version.\n";
  print "       You must specify the EDA Toolkit version, in format 14.1.{n}, using the -t switch.\n\n";
  exit 8;
}
# Ensure tkVersion is in correct format
$rc = TkCommon::check_tkVersion ($tkVersion);
if ($rc != 0) {
  print "\nERROR: Toolkit version specified in an invalid format!\n";
  print "       You must specify the EDA Toolkit version, in format 14.1.{n}, using the -t switch.\n\n";
  exit 8;
}
if ($compAttrList eq "") {
  print "\nINFO: No component group attribute specified.\n";
  print "Using default component attribute definition of DELIVERED.\n";
	print "\nOther options include BUILD_SUPPORT, TEST SUPPORT, and 32-BIT\n";
	print "These can be specified (white space separated, enclosed in double quotes) using the -a input switch.\n\n";
	$compDef = "DELIVERED";
}
else {
  my $onetime = 1;
	# Validate the input attributes
	print "\nComponent attributes specified:\n";
	foreach $compAttr (sort split(/ /, $compAttrList)) {
		print "$compAttr\n";
		if (! $valid_attrs{$compAttr}) {
			print "Found an invalid parameter on the -a switch\n";
			exit 4;
		}
		else {
			if ($onetime) {
				$compDef = $compAttr;
        $onetime = 0;
			} else {
				$compDef = $compDef . "," . $compAttr;
			}
		}
	}
}

#
# Set up program parameters
#
if ($devMode) {
	our $scriptPath = "${codePath}/edainfra/tools/enablement/dev/bin";
} else {
	our $scriptPath = "${codePath}/edainfra/tools/enablement/prod/bin";
}

# Start the logging
log_execution ("start", "full_TK");

print "Using component definition: \"$compDef\"\n";

#
# Get the TK version-specific component definition
#
my $cmdbCmd = "$scriptPath/getComponents -t $tkVersion -ct $compDef -q $dbType";
$compList = `$cmdbCmd`;
chomp ($compList);
$rc = $? >> 8;

if ($rc) {
	print "ERROR: Return code $rc from $cmdbCmd.\n";
	exit $rc;
} else {
	print " \n";
	print "Component list created. rc=$rc\n";
	if ($DEBUG) {
		print "Results:\n";
		$compCnt = 0;
		foreach $comp (sort split(/,/, $compList)) {
			$compCnt++;
			print "$compCnt) $comp\n";	
		}
	}
}

#
# Process a command against the list of defined components
#
$compCnt = 0;
foreach $comp (sort split(/,/, $compList)) {
	$compCnt++;
	print "\n$compCnt) $comp\n";

  $treetop = "/afs/eda/ship/$comp/14.1";
	
	$validCmd = "ls -l $treetop/LEVELHIST";
	
	# Execute the command
	TkCommon::runcmd("$validCmd", "$DEBUG");
	$rc = $? >> 8;
	
	if ($rc) {
		$badCnt++;
		print "\n[ERROR]: Command, \"$validCmd\", did NOT execute successfully.\n";
	}
	else {
		print "\nDisplaying LEVELHIST in $comp/14.1 directory.\n";
	}
}
print "\nThe script, $scriptName, finished with $badCnt out of $compCnt components having errors.\n";

log_execution ("end", "");
print "\nLOG file located at $logFile.\n\n";
close (STDOUT);
