#!/usr/bin/perl
# =============================================================================
#
#    FILE: bomChecker.xmit2ss
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Eric Hull
#    DATE: 12/11/2012
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 12/11/2012 EH  Initial coding.
# 02/24/2013 EH  Changed log file type from .log to .html.
# 02/24/2013 EH  Added summary info to a line hidden as an html comment. This
#                line can be imported to a spread sheet or read by a script.
# 02/24/2013 EH  Added Barb Antol and Jody Coleman to email alert distribution.
# 03/12/2013 EH  Added exception to change filtering of Selfstore content for 
#                tgsupport and EDAdochtml components.
# 03/18/2013 EH  Added getSsFileNamePreGa() to exclude Preview Selfstore files
#                that are added to existing Production files prior to FCS.
# 03/31/2013 EH  Disabled getSsFileNamePreGa() now that the Pre GA period has 
#                passed for 14.1.4.
# 07/11/2013 EH  Replaced ehull\@us.ibm.com with stadtlag\@us.ibm.com in email notification.
# 07/11/2013 EH  Removed antolb\@us.ibm.com from email notification.

use strict;
use warnings;
use Getopt::Std;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");
use File::Path;

# Global variables
my $rls = "";
my $rc = 1;
my $help = "";
my $OK = 0;
my $ERROR = 8;
my $debug = 1;
my $SVNPROD = "/afs/eda/data/edainfra/tools/enablement/prod/bin";
my $logDir = "/afs/eda/data/edainfra/bom/xmit2ss";
my $logFile = "";

# Program name
my $appName = "bomChecker.xmit2ss";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $useShip = 0;
my $useTk   = 0;
my $level = "";
my $release = "14.1";
my $component = "";
my $platSelfstore = "";
my $platDotShip = "";
my $line = "";
my %xmitBOM = ();
my %ssBomDR = ();
my %combinedHash = ();
my $tgtSsDir = "";
my $location = "";
my $cmdLineArgs = "";
my $noResults = 1;
my $stage = "";
my $toolKit = "";
my $platform      = "";
my $xmitOnlyCnt = 0;
my $ssOnlyCnt = 0;
my $totalDifferences = 0;
my $xmitOnlyCntAix61 = 0;
my $xmitOnlyCntLinux26_RH5 = 0;
my $ssOnlyCntAix61 = 0;
my $ssOnlyCntLinux26_RH5 = 0;

# Define platforms
# Selfstore platforms
#   aix61_64
#   lnx26_64_rh5
#
# .ship (transmittal window) platforms
#   .ship-64-rs_aix61
#   .ship-64-amd64_linux26_RH5
my (@platforms) = (
                     "aix61;aix61_64;.ship-64-rs_aix61;"
                   , "linux26_RH5;lnx26_64_rh5;.ship-64-amd64_linux26_RH5;"
                  );
                  
# Program's global return code - initialize to ERROR
my $progRC  = $ERROR;

#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

#
# Define the current directory
#
my $startDir = $ENV{"PWD"};

#
# To exit cleanly from a Ctrl+C or an unexpected die()
#
# EH TODO: Look at why this section is different in agts.engine?
$SIG{'INT'} = sub { handleInterruption();
                    exit($ERROR);
                  };

$SIG{'QUIT'} = sub { handleInterruption();
                     exit($ERROR);
                   };

$SIG{__DIE__}  = sub { handleDIE();
                       #exit($ERROR);
                     };

#
# Read the command line arguments
#
$progRC = processArgs();
if ($progRC == $ERROR) {
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}

# Enable logging
$rc = setupLogging();
if ($rc > 0) {
  CleanExit("ERROR: Unable to complete $appName initalization", $ERROR);
}

my $ssDir = "/afs/eda/edadist/products/$component/1401";
my $ssTestDir = "$ssDir/test";
 
#-------------------------------------------------------------------------------
# Process each platform in turn for the specified level and component
#-------------------------------------------------------------------------------
foreach $line (@platforms) {                  
  my @tokens = split(/;/, $line);
  $platform      = $tokens[0];
  my $platSelfstore = $tokens[1];
  my $platDotShip   = $tokens[2];

  $tgtSsDir = "";
  %xmitBOM = ();
  %ssBomDR = ();
  %combinedHash = ();
  $xmitOnlyCnt = 0;
  $ssOnlyCnt = 0;
  
  
  # Determine which transmit repository to use and what location name to use
  if ($useShip) {
    $level = "ship";
    $stage = "Preview";
    #$location = "Preview (ship)";
  }
  elsif ($useTk) {
    $level = "tk";
    $stage = "Production";
    #$location = "Production (tk)";
  }
  else {
    CleanExit("ERROR: Unable to determine which transmit repository to use", $ERROR);
  }
  
  # Query the CM DB for the current Tool Kit version
  chomp($toolKit = `$SVNPROD/getToolKits -r 14.1 -s $stage -q`);
  
  # Define the location
  $location = "$toolKit $stage ($level)";
  
  
  
  ##print "\nSTARTING: $component $platform $level\n";
  
  #-------------------------------------------------------------------------------
  # Get xmitBOM
  #-------------------------------------------------------------------------------
  %xmitBOM = processLevelComponent($level, $component, $platDotShip);


  #-------------------------------------------------------------------------------
  # Get ssBOM
  #-------------------------------------------------------------------------------
  my($rcRef, $ssBomRef) = getSsBOM($platSelfstore);

  # http://affy.blogspot.com/p5be/ch08.htm  <-- references

  %ssBomDR = %$ssBomRef; # The @$ dereferences the array reference that was returned by the subroutine

  ##print "rc: $$rcRef\n";  # The extra $ dereferences the scalar variable that was returned by the subroutine

  # Combine the xmitBOM results with the ssBOM results
  MergeResults();

  #-------------------------------------------------------------------------------
  # Write results for this component and platform to stdout (and to a file)
  #-------------------------------------------------------------------------------
  @tokens = ();
  $noResults = 1;
  my $element = "";
  foreach $element (sort(keys %combinedHash)) {
    next if $element eq "";
    next if $element =~ /_14.1_link$/;
    next if $element eq "bin64/$component";
    next if $element eq "bin-64/$component";
    next if $element eq "bin-64";
    next if $element eq "dll-64";
    next if $element eq "lib-64";
    next if $element eq "include";
    next if $element eq "tcl";
    next if $element eq "nutscript";
    next if $element eq "perl";
    next if $element eq "html";
    next if $element eq "html/cmdref";
    next if $element eq "html/msghelp";
    next if $element eq "html/msgref";
    @tokens = split(/;/, $combinedHash{$element});

    # Transmit BOM only (File needs to deleted from Selfstore)
    if (($tokens[0] eq "$level") && ($tokens[1] eq " ")) {
      printf "%-11s %-11s  [%-4s only]  %-25s\n", $component, $platform, $level, $element;
      $noResults = 0;
      $xmitOnlyCnt = $xmitOnlyCnt + 1;
    }
    # Selfstore only (File needs to deleted from xmit location)
    elsif (($tokens[0] eq " ") && ($tokens[1] eq "ss")) {
      printf "%-11s %-11s  [%-4s only]  %-25s\n", $component, $platform, "ss", $element;
      $noResults = 0;
      $ssOnlyCnt = $ssOnlyCnt + 1;
    }
  }

  if ($platform eq "aix61") {
    $xmitOnlyCntAix61 = $xmitOnlyCnt;
    $ssOnlyCntAix61 = $ssOnlyCnt;
  }
  
  if ($platform eq "linux26_RH5") {
    $xmitOnlyCntLinux26_RH5 = $xmitOnlyCnt;
    $ssOnlyCntLinux26_RH5 = $ssOnlyCnt;
  }  
  
  if ($noResults) {
    printf "%-11s %-11s  %-25s\n", $component, $platform, "No differences were found between transmit BOM and latest Selfstore file.";
  }

  ##print "\nCOMPLETED: $component $platform $level\n\n";
}

$totalDifferences = $xmitOnlyCntAix61 + $xmitOnlyCntLinux26_RH5 + $ssOnlyCntAix61 + $ssOnlyCntLinux26_RH5;

# Send email alert
SendEmailAlert($component, "0", $logFile);

# Write semicolon delimited summary data to lines hidden in an html comment

chomp(my $currDate = `date +%C%y-%m-%d`);
chomp(my $currTime = `date +%H:%M:%S`);
print "</pre>\n";
print "<!SCD_HEADER;date;time;tk version;tk stage;component;ss_only_aix61;ss_only_linux26_RH5;xmit_only_aix61;xmit_only_linux26_RH5;total_differences;>\n";
print "<!SCD_DATA;$currDate;$currTime;$toolKit;$stage;$component;$ssOnlyCntAix61;$ssOnlyCntLinux26_RH5;$xmitOnlyCntAix61;$xmitOnlyCntLinux26_RH5;$totalDifferences;>\n";
print "<pre>\n";

# Log completion
#chomp(my $logDate = `date +%C%y-%m-%d\\ %H:%M:%S`);
#CleanExit("\n$logDate $appName complete", $OK);
CleanExit("\n$currDate $currTime $appName complete", $OK);


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {

  print "\n[$appName] Caught interruption - Exiting with a cleanUp\n";
  chdir($startDir);

}  # End of handleInterruption


#------------------------------------------------------------------------------
# Name   : handleDIE()
# Purpose: To handle an unexpected die().
# RCs    : none
#------------------------------------------------------------------------------
sub handleDIE {

  print "\n[$appName] Caught an unexpected die - Exiting with a cleanUp\n";
  chdir($startDir);

}  # End of handleDIE


#------------------------------------------------------------------------------
# Name   : CleanExit($message, $rc)
# Purpose: Performs any applicatin clean up and exits with rc
# RCs    : none
#------------------------------------------------------------------------------
sub CleanExit {
  my ($message, $rc) = @_;
  print "$message\n";
  print "Return code: $rc\n";
  close (STDOUT);
  chdir($startDir) if (defined($startDir));
  exit $rc;
}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
Compares BOM (Bill Of Materials) for ship or tk levels against Selfstore BOM for a component.
";

  my $syntax = "
SYNTAX:
  $appName [ -c component ] [-s | -t] [-h]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  -c      individual component
  -s      ship level
  -t      tk level
  -h      Application help (optional)
";

  print $progDescription;
  print $syntax;
  print $where;
}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Capture command line arguments for logging (before GetOptions deletes them)
  $cmdLineArgs = join(' ', @ARGV);

  # Parse command line arguments
   GetOptions ('c=s'  => \$component,
               's'  => \$useShip,
               't'  => \$useTk,
               'help|h|?'   => \$help
               ) || return $ERROR;

  # If help requested, show usage
   if ($help) {
     printHelp();
     return $ERROR;
   }

  # Validate required inputs
  unless (($useShip && !$useTk) || (!$useShip && $useTk)) {
    print "ERROR: Either -s or -t must be specified\n";
    return $ERROR;
  }   
   
  return $OK;

}


#------------------------------------------------------------------------------
# Name   : setupLogging()
# Purpose: Enable logging
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub setupLogging {

  # Create $logDir if it does not already exist
  mkpath($logDir) if (! -d $logDir);

  # Open log file for script messages
  chomp(my $logDate = `date +%C%y%m%d\_%H%M%S`);
  #$logFile = "$logDir/" . $appName . "_" . $component . "_" . $logDate . ".log";
  $logFile = "$logDir/" . $appName . "_" . $component . "_" . $logDate . ".html";

  open (STDOUT, "| tee -a $logFile") || die "ERROR: unable to open log file $logFile  $!\n";

  my $afsId = (getpwuid($<)) [0];
  #if ($afsId ne "$authorizedId") {
  #  print "\nERROR: Only the $authorizedId AFS ID is permitted to run this script\n";
  #  return $ERROR;
  #}

  print "<pre>\n";
  chomp(my $dateTime = `date +%C%y-%m-%d\\ %H:%M:%S`);
  chomp(my $machine = `hostname`);
  print "\n$dateTime $afsId on $machine invoked $appName $cmdLineArgs\n\n";

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : MergeResults()
# Purpose: Merge the results from ship/tk and ss into %combinedHash.
#          At the same time, set the value of each %combinedHash element to 
#          indicate if the hit came from ship/tk ss or both.
# RCs    : 0 = OK
#          1 = 
#------------------------------------------------------------------------------
sub MergeResults {     

  my $element = "";

  # Merge the component results in %combinedHash
  foreach $element (sort(keys %xmitBOM)) {
    next if $element eq "";

    # Identify elements in both tk/ship and ss
    if (exists $ssBomDR{$element}) {
      $combinedHash{$element} = "$level;ss;";
    }

    # Identify elements only in tk/ship
    else {
      $combinedHash{$element} = "$level; ;";
    }
  }

  # Identify elements only in ss
  foreach $element (sort(keys %ssBomDR)) {
    next if $element eq "";
    if (! exists $xmitBOM{$element}) {
      $combinedHash{$element} = " ;ss;";
    }
  }
  
  return $OK;
  
}


#------------------------------------------------------------------------------
# Name   : getSsBOM($platSelfstore)
# Purpose: Get Selfstore BOM
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub getSsBOM {

  my ($platSelfstore) = @_;

  my $rc = $ERROR;      # Default: not converted
  my $selfstoreFile = "";
  my @ssBomRaw = ();
  my $entry = "";
  my %ssBomHash = ();
  my @ssBomFiltered = ();
  my @fileAttr  = ();

  my @tokens   = ();
  my $bytes    = "";
  my $date     = "";
  my $time     = "";
  my $fileName = "";
  my @tokens2  = ();
  my $maint    = "";
  my $ptf      = "";

  # Make the Selfstore directory the current directory
  if ($level eq "ship") {
    chdir ("$ssTestDir");
  }
  elsif ($level eq "tk") {
    chdir ("$ssDir");
  }

  # Get the name of the Selfstore file in the "test" dir to use
  $selfstoreFile = getSsFileName($platSelfstore);
  #$selfstoreFile = getSsFileNamePreGa($platSelfstore); # Use for PreGa period only!
  
  # If there are no ss files in the "test" dir this must be the first Preview
  # transmittal for this release. 
  #
  # When this happens, look in the production Selfstore directory (1401) for 
  # Selfstore files.
  if (($level eq "ship") && ($selfstoreFile eq ""))  {
    chdir ("$ssDir");
    $selfstoreFile = getSsFileName($platSelfstore);
    #$selfstoreFile = getSsFileNamePreGa($platSelfstore); # Use for PreGa period only!
  }
  
  # If there are still no ss files, quit.
  if ($selfstoreFile eq "") {
    print "$component: Aborted. No Selfstore files found in $ssTestDir or $ssDir\n";
    exit;
  }

  # Get file attributes (with ISO datetime format)
  # WARNING: The ls parameters used here are only available on Linux machines! ****
  #@fileAttr = `ls -gGR --time-style=long-iso $selfstoreFile`; 
  #foreach $line (@fileAttr) {
  #  @tokens   = split(/ +/, $line);
  #  $bytes    = $tokens[2]; # not used
  #  $date     = $tokens[3];
  #  $time     = $tokens[4];
  #  $fileName = $tokens[5]; # not used
  #  @tokens2  = split(/\./, $fileName);
  #  $maint    = $tokens2[2]; # not used
  #  $ptf      = $tokens2[3]; # not used
  #}
  chomp(my $selfstoreDir = `pwd`);
  print "selfstoreDir:       $selfstoreDir\n" if($debug);
  print "ssFile:             $selfstoreFile\n" if($debug);

  # Execute the Selfstore file to get a list of files it contains
  chomp(@ssBomRaw = `$selfstoreFile -t 2>/dev/null`);
  $rc = $? >> 8;

  if ($rc > 0) {
    print "ERROR: Execution of Selfstore file $selfstoreFile failed\n";
  }

  # Filter out entries that are not component files.
  if ($component eq "tgsupport") { 
  
    # Keep only entries that start with theguide_support
    (@ssBomFiltered) = grep(/^theguide_support/, @ssBomRaw);
  }
  elsif ($component eq "EDAdochtml") {
    
    # Keep only entries that start with html or EDAManuals
    (@ssBomFiltered) = grep(/^html/ || /^EDAManuals/, @ssBomRaw);
  }
  else {
  
    # Keep only entries that start with <component>/<release>
    (@ssBomFiltered) = grep(/^$component\/$release/, @ssBomRaw);
  }
 
  # Remove <component>/<release>/ when it appears at the beginning of each entry
  # so that the result is consistent with the format from transmit.
  foreach $entry (@ssBomFiltered) {
    next if ($entry eq "$component/$release");
    $entry =~ s,^$component/$release/,,;

    if (! exists $ssBomHash{$entry}) {
      $ssBomHash{$entry} = "";
    }
  }

  # Return references to avoid problems with mixed types
  return (\$rc, \%ssBomHash);
}


#------------------------------------------------------------------------------
# Name   : getSsFileName($platSelfstore)
# Purpose: Get Selfstore file name
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub getSsFileName {
  
  my ($platSelfstore) = @_;
  
  # Sort the files by datetime and return the file name of the most recent one in "test"
  chomp(my $selfstoreFile = `ls -1t *.$platSelfstore 2>/dev/null |head -n 1`);
  return $selfstoreFile;
}


#------------------------------------------------------------------------------
# Name   : getSsFileNamePreGa($platSelfstore)
# Purpose: Get Selfstore file name when Preview files have been migrated prior
#          to FCS for "Pre GA" (aka "internal GA)).
#
#          This subroutine must be disabled at FCS. 
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub getSsFileNamePreGa {
  
  my ($platSelfstore) = @_;
  my $fileName = "";
  my $age = "";
  my $patchUpdate = "";
  my @tokens = ();
  my $selfstoreFile = "";
  
  # Sort the files by datetime and return the file name of the most recent one in "test"
  chomp(my @results = `ls -1t *.$platSelfstore 2>/dev/null`);
  foreach $fileName (@results) {
    @tokens = split(/\./, $fileName);
    $patchUpdate = $tokens[3];
    $age = (-M $fileName);
    
    # Reject recent Preview files that belong to Tool Kit version that is about to attain FCS.
    next if ( ($useTk) && ($patchUpdate eq "0000") && ($age < 75) );
    $selfstoreFile = $fileName;
    last;
  }
  return $selfstoreFile;
}


#------------------------------------------------------------------------------
# Name   : processLevelComponent($level, $component, $dotShipDir)
# Purpose: Process entries for specified level and component and platform
# RCs    : n/a
#------------------------------------------------------------------------------
sub processLevelComponent {

  my ($level, $component, $dotShipDir) = @_;
  my %sumHashShip = ();
  my @dotShip = ();
  my %dotShipHash = ();
  my @dotShipLinux = ();
  
  my @dontShipEntries = ();
  my %dontShipHash = ();
  
  my $dontShipEntry; 
  my $dotShipEntry; 
  my $dontShipFile;
  
  my $shipPlatDir = "";
  my $element = "";
    
  # Get a list of .ship entries
  $shipPlatDir = "/afs/eda/$level/$component/$release/$dotShipDir";
  print "\n-------------------------------------------------------------------------------------\n" if($debug);
  chomp(my $logDate = `date +%C%y-%m-%d\\ %H:%M:%S`);
  print "$logDate Transmittal of $component $platform deliverables from $location\n\n";
  print "transmittal window:  /afs/eda/$level/$component/$release/$dotShipDir\n" if($debug);
  if (! -d "$shipPlatDir") {
    print "ERROR: $shipPlatDir not found. Skipping this component.\n";
    return %sumHashShip;
  }
  chdir("$shipPlatDir");
  open (DOT_SHIP, "find -L *  |")
   or die "Cannot read find command results $!\n";
  chomp(@dotShip = <DOT_SHIP>);
  close(DOT_SHIP);
   
  # Add dot ship entries to   %dotShipHash
  foreach $dotShipEntry (@dotShip) {
    $dotShipHash{$dotShipEntry} = "";
  }
 
  # Get a list of .dont_ship entries
  $dontShipFile = "/afs/eda/$level/$component/$release/.dont_ship";
  if (-e $dontShipFile) {
    open(DONT_SHIP, "$dontShipFile") || die "open $dontShipFile failed";
    chomp(@dontShipEntries = <DONT_SHIP>);
    close(DONT_SHIP);
  }
  
  foreach $dontShipEntry (@dontShipEntries) {
    $dontShipHash{$dontShipEntry} = "";
  }

  #---------------------------------------------------------------------------
  # Summarize results for ship component in    %sumHashShip
  # Remove the entries identified in .dont_ship file
  #---------------------------------------------------------------------------
  foreach $element (keys %dotShipHash) {

    # Exclude files with subroutine from xmit_common
    if (! valid_file($element)) {
      next;
    }

    #print "XMIT_ENTRY: $element\n";   # DEBUG ***
    
    if (! exists $dontShipHash{$element}) {
      $sumHashShip{$element} = "";
    }   
  }

  return %sumHashShip;
  
}


#---------------------------------------------------------------------------------
# Name   : SendEmailAlert($component, $urgent, $logFile)
# Purpose: Send e-mail containing URL to log file
#
#---------------------------------------------------------------------------------
sub SendEmailAlert {

  my ($component, $urgent, $logFile) = @_;

  my $mailList = "";
  
  # Don't send mail if in debug mode.
  #return if ($debug);

  if ($noResults) {
  
    # List of email addresses to be used when there ARE NO results
    #$mailList = "ehull\@us.ibm.com";
    $mailList = "stadtlag\@us.ibm.com";
  }
  else {
    # List of email addresses to be used when there ARE results
    #$mailList = "ehull\@us.ibm.com jwcolem\@us.ibm.com antolb\@us.ibm.com";
    $mailList = "stadtlag\@us.ibm.com jwcolem\@us.ibm.com";
  }

  # Get datetime for email
  chomp(my $dateTime = `date +%C%y-%m-%d\\ %H:%M:%S`);

  # Define email body
  my $body = "See details at https://w3.eda.ibm.com$logFile";

  # Set the email subject
  my $subject = "xmit2selfstore comparison";

  `mailx -s "$component $toolKit $subject ($dateTime)" $mailList << EOF

$body

EOF`;

  print "\nEmail sent: mailx -s \"$component $subject ($dateTime)\" $mailList\n";

}


#===============================================================================
# Name   : valid_file($file)   from xmit_common script
# Purpose: general purpose filter: return (nothing) if file is to be excluded,
# otherwise return 't'
#
#===============================================================================
sub valid_file {

  my ($file) = @_;

  # filter to remove files from deliverables
  if ($file =~ /-O\.dll/) # optimized dlls
    {
      return;
    }
  elsif ($file =~ /-O\.exp/) # optimized exp files
    {
      return;
    }
  elsif ($file =~ /-O$/) # optimized files ending with '-O'
    {
      return;
    }
  elsif ($file =~ /dll(-64)*\/\./) # dotfiles in dll dir
    {
      return;
    }
  elsif ($file =~ /bin(-64)\/*\./) # dotfiles in bin dir
    {
      return;
    }
  elsif ($file =~ /prev.ship.list/) # previous filelist
    {
      return;
    }
  elsif ($file =~ /prior.ship.list/) # prior filelist
    {
      return;
    }
  elsif ($file =~ /~$/) # xemacs/emacs backup files
    {
      return;
    }
  elsif ($file =~ /imp$/) # files ending 'imp'
    {
      return;
    }
  elsif ($file =~ /loadmap$/) # loadmap files
    {
      return;
    }
  elsif ($file =~ /-g$/) # debug dlls  (end of file??)
  #elsif ($file =~ /-g/) # debug dlls, possible change discussed with Gregg and Jody, 3/2012
    {
      return;
    }
  elsif ($file =~ /-pg/) # profiling dlls
    {
      return;
    }
  elsif ($file =~ /[Mm]akefile/) # Makefiles
    {
      return;
    }
  elsif ($file =~ /[-_.]pure/) # purify files
    {
      return;
    }
  elsif ($file =~ /-quant/) # quant? files
    {
      return;
    }
  elsif ($file =~ /_auto_loads.tcl/) # _auto_loads.tcl
    {
      return;
    }
  else {
  }

  return("t");

}

