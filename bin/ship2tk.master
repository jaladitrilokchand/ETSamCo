#!/usr/bin/perl
# =============================================================================
#
#    FILE: ship2tk.master
#  SYNTAX: See "printHelp" methods below or execute the program with -h
#
# CREATOR: Eric Hull
#    DATE: 03/13/2013
#
#  INPUTS: See "printHelp" methods below
#
# OUTPUTS: n/a
#
# RETURN CODES: See "printSyntax" method below.
#
#
# PURPOSE ---------------------------------------------------------------------
# See "printHelp" method.
# -----------------------------------------------------------------------------
#
#
# CHANGE LOG ------------------------------------------------------------------
# 03/13/2013 EH  Initial coding (cloned from agts.master)
# =============================================================================
#
# FUTURE WORK -----------------------------------------------------------------
# - Add logic to change stage names for current and previous TK versions
#
# =============================================================================
use warnings;
use strict;
use Getopt::Std;
use Getopt::Long;
Getopt::Long::Configure ("no_ignore_case");

# Required for Blue Pages ???
use lib '/afs/eda/data/edainfra/tools/enablement/dev/libperl';


# Global variables
# TODO - may want to change dev to prod ...
my $BIN_DIR = "/afs/eda/data/edainfra/tools/enablement/dev/bin";
my $DATA_DIR = "/afs/eda/data/edainfra/tools/enablement/dev/data";
my $LOGS_DIR = "/afs/eda/data/edainfra/logs";

# Program variables
my $appName = "agts.master";
my $progInvocation = $appName;
foreach (@ARGV) {
    $progInvocation .= " " . $_;
}

# Program arguments
my $help            = "";
my $verbose         = 0;
my $toolKit         = "";
my $dbMode          = ""; # default is prod if empty
my @components      = ();
my $component       = "";
my $appErrorMessage = "";
my $startDir = $ENV{"PWD"};
my $dryRunMode      = 0;
my $testMode        = 0;
my $reverse         = 0;

# Return codes
my $OK    = 0;
my $ERROR = 8;

# Generic application variables
my @tokens = ();
my $entry  = "";
my $rc     = $ERROR;


#-----------------------------------------------------------------------------#
#                 M A I N   P R O G R A M                                     #
#-----------------------------------------------------------------------------#

# Deal nicely with unexpected exits
$SIG{'INT'}   = sub { handleInterruption(); };
$SIG{'QUIT'}  = sub { handleInterruption(); };
$SIG{__DIE__} = sub { handleInterruption(); };

# Read the command line arguments
$rc = processArgs();
if ($rc == $ERROR) {
    print "\n[$appName] Use -h to get more details.\n";
    exit $ERROR;
}


print "Running in TEST mode ...\n" if ($testMode);
print "Running in DRY RUN mode ...\n" if ($dryRunMode);


# Create list of components to process ***
@components = SetComponents();
if (scalar(@components) < 1) {
  CleanExit("No components to process ... exiting\n", $ERROR);
}

# Process each component
foreach $component (@components) {

  #next unless ($component =~ /etreetest3/);  # FOR TESTING

  # Skip the etreetest4 component
  next if ($component =~ /svntest1/);
  next if ($component =~ /etreetest1/);
  next if ($component =~ /etreetest2/);
  next if ($component =~ /etreetest3/);
  next if ($component =~ /etreetest4/);

  # Call ship2tk engine
  $rc = ExecuteShip2Tk($component);
  if ($rc > 0) {
    print "--------------------------------------\n";
    print "WARNING: Unable to process $component\n";
    print "--------------------------------------\n";
  }
}

CleanExit("\nApplication complete", $OK);


#-----------------------------------------------------------------------------#
#                F U N C T I O N  D E F I N I T I O N S                       #
#-----------------------------------------------------------------------------#

#------------------------------------------------------------------------------
# Name   : handleInterruption()
# Purpose: To handle Ctrl+C interrruption
# RCs    : none
#------------------------------------------------------------------------------
sub handleInterruption {
  CleanExit("\n[$appName] Caught interruption - exiting\n", $ERROR);
}


#------------------------------------------------------------------------------
# Name   : cleanup($message, $rc)
# Purpose: Performs any applicatin clean up and exits with rc
# RCs    : none
#------------------------------------------------------------------------------
sub CleanExit {
  my ($message, $rc) = @_;

  print "$message\n";
  print "Return code: $rc\n";
  chdir($startDir) if (defined($startDir));
  exit $rc;

}


#------------------------------------------------------------------------------
# Name   : printHelp()
# Purpose: Prints discription and full usage to console
# RCs    : none
#------------------------------------------------------------------------------
sub printHelp {

  my $progDescription = "
This script executes the ship to tk process for all components in 
the given EDA Tool Kit.
";

  my $syntax = "
SYNTAX:
  $appName <-t tool_kit> [-dryrun] [-test] [-h]

RETURN CODES:
  0(ok) 8(error)
";

  my $where ="
WHERE:
  tool_kit   = Tool Kit version (ie, 14.1.1, 14.1.2 ...)
  -dryrun    = (optional) Run script in dryrun mode
  -test      = (optional) Run script in test mode (doesn't exec most functions)
  -y         = (optional) verbose output
  -h           (optional) application help
";

  print $progDescription;
  print $syntax;
  print $where;

}


#------------------------------------------------------------------------------
# Name   : processArgs()
# Purpose: Read and verify command line arguments
# RCs    : 0 = OK
#          8 = ERROR
#------------------------------------------------------------------------------
sub processArgs {

  # Parse command line arguments
  GetOptions ('tk|t=s'     => \$toolKit,
	      'db=s'       => \$dbMode,
	      'dryrun'     => \$dryRunMode,
	      'reverse'    => \$reverse,
	      'test'       => \$testMode,
	      'y'          => \$verbose,
	      'help|h|?'   => \$help)
    || return $ERROR;

  # If help requested, show usage
  if ($help) {
    printHelp();
    return $ERROR;
  }

  # Can't run in dryrun and test modes at the same time
  if ($testMode && $dryRunMode) {
    print "ERROR: Test and dryrun modes are not valid at the same time.\n";
    return $ERROR;
  }

  # Validate required input
  if (! $toolKit) {
    print "ERROR: Tool Kit (-t) is a required parameter\n";
    return $ERROR;
  }

  return $OK;

}


#------------------------------------------------------------------------------
# Name   : SetComponents()
# Purpose: Create a list of components ready for AGTS
# RCs    : List of component names or empty list
#------------------------------------------------------------------------------
sub SetComponents {

  print " Querying for components in $toolKit ...\n" if ($verbose);

  # Query the DB for tk/components in the specified Tool Kit version
  # Construct the command
  my $command = "$BIN_DIR/getComponents";
  $command .= " -t $toolKit";
  $command .= " -q";
  $command .= " -db $dbMode" if ($dbMode);

  # Run the command
  print "  TESTING ... $command\n" if ($testMode);
  my @results = `$command`;
  my $rc = $? >> 8;

  my $comps = $results[0];
  chomp $comps;
  print "Results: $comps\n" if ($verbose);

  my @list = ();
  if ($rc == 0) {
    @list = split(/,/, $comps);
  }

  print "Found " . scalar(@list) . " components\n" if ($verbose);

  return reverse(@list) if ($reverse);

  return @list;

}


#------------------------------------------------------------------------------
# Name   : ExecuteShip2Tk()
# Purpose: Run the ship2tk engine for the specified tool kit and component
# RCs    : rc from ship2tk
#------------------------------------------------------------------------------
sub ExecuteShip2Tk {

  my ($myComponent) = @_;

  # For testing ...
  if ($testMode) {
    if ($myComponent eq "etreetest3") {
      print "  TESTING - forcing ship2tk.engine to fail ...\n";
      return 8;
    }
  }

  # Construct the command
  my $command = "$BIN_DIR/ship2tk.engine";
  $command .= " -t $toolKit";
  $command .= " -c $myComponent";
  $command .= " -y " if ($verbose);
  $command .= " -dryrun " if ($dryRunMode);
  $command .= " -db $dbMode" if ($dbMode);

  print "Running: $command\n";
  
  # Run the command
  my $rc = RunSystem($command);

  return $rc;

}


#------------------------------------------------------------------------------
# Name   : RunCommand($command)
# Purpose: Executes the command and returns the command's return code
# RCs    : return code
#------------------------------------------------------------------------------
sub RunCommand {

  my ($command) = @_;

  my $rc = $OK;
  if ($testMode) {
    print "  TESTING ... $command\n";
  }
  else {
    print "  Command: $command\n";
    `$command`;
    $rc = $? >> 8;
  }

  return $rc;

}


#------------------------------------------------------------------------------
# Name   : RunSystem($command)
# Purpose: Executes the command and returns the command's return code
# RCs    : return code
#------------------------------------------------------------------------------
sub RunSystem {

  my ($command) = @_;

  my $rc = $OK;
  if ($testMode) {
    print "  TESTING ... $command\n";
  }
  else {
    print "  Command: $command\n";
    system($command);
    $rc = $? >> 8;
  }

  return $rc;

}
