#!/usr/bin/env perl
#use warnings;
#use strict;
#=============================================================================
#    FILE: create_tkversion_tree
#
# CREATOR: Art Magnan
#    DEPT: AZYX
#    DATE: 04/04/2011
#
# OUTPUTS: AFS Volumes
#
# RETURN CODES: 0 = OK
#               8 = error
#
#-PURPOSE---------------------------------------------------------------------
# OPS WRAPPER: Create the AFS volumes and basic infrastructure for the 14.1
# definition of a Toolkit versioned component/release tree 
#            (/afs/eda/tk14.1.{n}/{component}/14.1)
#
#-NOTES---------------------------------------------------------------------
# (1) This script will create either an entire Toolkit version tree, containing all
#     components defined for a particular version OR a single component/release tree.
#     (a) If only the -t switch is specified, then an entire Toolkit version tree 
#         creation is attempted.
#     (b) If the -t and -c switches are specified, then only a single component/release
#         tree creation is attempted.
# (2) The Toolkit version must be defined in the CM DB.
# (3) The component must be defined, and associated with this Toolkit version in the
#     CM DB.
#
#-CHANGE LOG------------------------------------------------------------------
# 04/04/2011 AM  Initial version
# 04/18/2011 AM  Updated scriptPath to use the main DEV and PROD tool development areas.
#                Removed validateRelComp and GetToolKits API calls since now done
#                in called routine, create_relver_tree_def.
# 05/09/2011 AM  Updated scriptPath to use the main DEV and PROD tool development areas.
# 05/13/2011 AM  Changed all references to btv/edainfra to eda/edainfra for SVN migration.
# 07/19/2011 AM  Updated to implement new volume creation scheme. One volume created
#                per component/release. Also added check and reminder to run as AFS Admin.
# 07/22/2011 AM  Added more return code checking.
# 08/22/2011 AM  Updated to use the "full_TK" keyword with the -c switch. This will cause
#                a full TK version tree to be created based on the component definition
#                file for this TK version.
#                Set up maxRC to handle the return codes.
# 04/12/2012 EH  Changed amagnan to bradmin in check_user().
# 04/12/2012 EH  Changed $topCodePath from /afs/eda/u/amagnan to /afs/eda/data
#=============================================================================
#=============================================================================
#			       FUNCTIONS and SUBROUTINES
#=============================================================================
sub help {
        print "\nScript to create the AFS volumes and basic infrastructure for a component tree";
				print " (/afs/eda/tk14.1.{n}/{component}/14.1)";
        print "\nUsage:  create_tkversion_tree -t <Toolkit version> [-c <component>] [-h] [-d] [-g]\n";
        print "\nInput parameters:\n";
				print "  -t <EDA Toolkit release version> e.g. 14.1.{n}\n";
        print "  -c <component_name> or \"full_TK\" for all components.\n";
        print "  -d [Development Mode ON]\n";
				print "  -g [Test mode ON - no AFS volumes created - will see what would execute.]\n";
				print "  -h This help\n";
        print "\nNOTES:\n";
        print "  1) The EDA Toolkit version and component name is required.\n";
        exit 1;
}

sub process_cmd_line {
  # --------------------------------------------------------------
  # Description  : This routine processes command line parameters
  # Parms defined:  -c <component_name; e.g. einstimer>
  #                 -d [Development mode ON - using code from DEV area]
  #                 -g [Test mode ON - no AFS volumes created - will see what would execute.]
  #                 -h [help]
  #                 -t <Toolkit version;  e.g. 14.1.0>
  # -------------------------------------------------------------- 
  getopts('c:dt:gh');

  $compName  = "$opt_c";
  $devMode   = "$opt_d";
  $tkVersion = "$opt_t";

  # Set DEBUG mode
	if ( ${opt_g} ) {
		$DEBUG = 1;
    $dbgFlg = "-g";
	}
	else {
		$DEBUG = 0;
    $dbgFlg = "";
	}
	
	if ( ${opt_h} ) { help(); }
}

sub display_script_parms {
	my ($compName, $tkVersion) = @_;
	
	print "------------------------------------------------------ \n";
	print " Parms Read By Program:        \n";
	print " $fullScrName \n";
	print "------------------------------------------------------ \n";
	print "Component name = \"$compName\" \n";
	print "TK Version     = \"$tkVersion\"\n";   
	if ($opt_d) { print "DEV Mode       = \"ON\" \n"; }
	else { print "DEV Mode       = \"OFF\" \n"; }
	if ($opt_g) { print "DEBUG Mode     = \"ON\" \n"; }
	else { print "DEBUG Mode     = \"OFF\" \n"; }
	print "------------------------------------------------ \n\n";

} # display_script_parms

sub max_rc {
	#
	# return the rolling maximum return code
	#
	my ($rc, $maxrc) = @_;
	
	if ($rc > $maxrc) {
		$maxrc = $rc;
	}
	return ($maxrc);
}

sub determine_space {
	
	@afs_space = `/afs/eda/u/lanadm/bin/space build`;
	$usage_limit = "85";
	
	@rev_space = reverse (@afs_space);
	$afs_info = $rev_space[0];
	chop ($afs_info);
	print "Best space: $afs_info\n";
	
	@afs_fields = split(/\s+/, $afs_info);
	$afs_server = $afs_fields[1];
	$afs_partition = $afs_fields[2];
	$afs_usage = $afs_fields[3];
	
	if ($afs_usage > $usage_limit) {
		if ($DEBUG) {
			print "I am over the $usage_limit limit.\n";
		}
	} else {
		if ($DEBUG) {		
			print "I am under the $usage_limit limit.\n";
		}
    $space_avail = 1;        # There is space available
	}	
}

sub check_user {
  # Check to remind user that they must have AFS
	# Admin authority to perfrom this TK operation

	my ($userID) = @_;
	my (@authID) = ("bradmin","nanhuo");
  my ($found) = 1;

	foreach $id (@authID) {
    #print "userID: \"$userID\"  authID: \"$id\"\n";
		if ( $userID eq $id ) {
			$found = 0;
			last;
		}
	}
  return ($found);
}
sub create_timestamp {
	#
	# Get date and time info from system
	#
	
	@months = qw(jan feb mar apr may jun jul aug sep oct nov dec);
	
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	
  $year = $year + 1900;
	
	$month = $mon + 1;
  $monthName = $months[$mon];
	$monthDay = $monthName . $mday;
	
  $date_now = $month . "/" . $mday . "/" . $year;
	
  if ($min < 10) {
    $newmin = "0" . $min;
  }
  else {
    $newmin = $min;
  }
  $time_now = $hour . ":" . $newmin;	
}

sub log_execution {
	#
	# Define the logging, execution timestamps
	#
	my ($when, $compType, $logPath, $logSuffix) = @_;
	my $tkVer = "";
	
	if ($when eq "start") {

    # Convert tkVersion for use in log file name
    $tkVer = TkCommon::convert_tkVersion ($tkVersion, "underscore");

		# Set up the log file
		create_timestamp;
		$datetime = "$date_now at $time_now";

		$logFile = "${logPath}/logs/${monthName}/${monthDay}.${compType}.${tkVer}.${scriptName}.${logSuffix}";
		unless (open(STDOUT, "| tee -ai $logFile")) {
			die ("Output file $logFile cannot be opened.\n");
		}
		
		# Log the start time
		print ("\n#\n");
		print ("# $fullScrName started at $datetime by $userID\n");
		print ("#\n");
		
		# Display the command line input parms
		display_script_parms ($compName, $tkVersion);
		
	} elsif ($when eq "end") {

		create_timestamp;
		$datetime = "$date_now at $time_now";
		
		# Log the end time
		print ("\n#\n");
		print ("# $fullScrName ended at $datetime by $userID\n");
		print ("#\n");
		
	} else {
		print "ERROR: log_execution: Can't figure out when I need to log!\n";
	}
}

#============================================================================================
#					MAIN ROUTINE
#============================================================================================
use Env;
use Getopt::Std;
use lib '/afs/eda/data/edainfra/tools/enablement/prod/libperl';
use TkCommon;

$maxRC = 0;        # this script return code
$rc = 0;

$afs_server = "";
$afs_partition = "";
$devFlg = "";
$dbgFlg = "";
$space_avail = 0;       # Assume no space is available
	
$dbType = "";   # defaults to production CM DB

$topCodePath = "/afs/eda/data";
#$topCodePath = "/afs/eda/u/amagnan";

our $scriptName = "create_tkversion_tree";
our $fullScrName = $0;

# Only persons with AFS Admin authority can create these volumes
$userID = $LOGNAME;
$rc = check_user ($userID);
if ($rc) {
  print "\nERROR: You must have AFS Admin authority to execute this EDA TK operation.\n\n";
  exit 8;
} else {
	print "\nREMINDER: Run this script using your AFS Admin authority ID !!!\n";
  sleep 5;
}

# Get inputs from command line
process_cmd_line;

# Make sure the required parameters are provided
if ($tkVersion eq "") {
  print "\nERROR: You must specify the EDA Toolkit release version in format 14.1.{n}.\n\n";
  exit 8;
}

# Set location of enablement code based on DEV or PRODUCTION (default) mode
if ($devMode) {
	$scriptPath = "${topCodePath}/edainfra/tools/enablement/dev/bin";
	$logPath = "/afs/eda/u/svnlib";
  $logSuffix = "devlog";
  $devFlg = "-d";       # forces into dev mode
}
else {
	$scriptPath = "${topCodePath}/edainfra/tools/enablement/prod/bin";
	$logPath = "/afs/eda/u/svnlib";
  $logSuffix = "log";
  $devFlg = "";         # defaults to production mode for execution
}

# Determine if this is a full release version tree or single component/release creation
if ($compName eq "full_TK") {
  $mode = "all";
  $modeText = "All defined in TK version";
  $treeDefFile = "/afs/eda/u/$USER/tk${tkVersion}.voldef";
	
} else {
	$mode = "single";
  $modeText = "$compName";
  $treeDefFile = "/afs/eda/u/$USER/tk${tkVersion}.$compName.voldef";
}

# Determine the afs_server, afs_partition to use
determine_space;

if ( $DEBUG ) {
	print "AFS server   : \"$afs_server\"\n";
	print "AFS partition: \"$afs_partition\"\n";
	print "AFS usage    : \"$afs_usage\"\n";
}

# Dependent on available space, attempt to build the AFS tree
if ($space_avail) {

	# Dependent on mode, attempt to build the appropriate AFS tree (full or single component)
	if ($mode eq "all") {
		
		log_execution ("start", "full_TK", $logPath, $logSuffix);

		# Define the command to create the component tree definition file for the entire TK version.
		$defCmd = "$scriptPath/create_relver_tree_def -t \"$tkVersion\" -c \"full_TK\" -f \"$treeDefFile\" $devFlg";
	}
	elsif ($mode eq "single") {
		
		# Start the process
		log_execution ("start", $compName, $logPath, $logSuffix);
		
		# Define the command to create the component tree definition file for a single component.
		$defCmd = "$scriptPath/create_relver_tree_def -t $tkVersion -c $compName -f $treeDefFile $devFlg";
	}
	
	# Define the command to process the definition file used to create and initialize the component tree
  $ref_rlse = substr($tkVersion,0,4);
	$ref_stg = "prod";
	$volCmd = "$scriptPath/gen_vols_tkrepos -t $tkVersion -r $ref_rlse -s $afs_server -p $afs_partition -b $ref_stg -f $treeDefFile -e -c $dbgFlg $devFlg";
	
	# Create the component tree definition file
	print `$defCmd`;
	$rc = $? >> 8;
	if ($rc) {
		print "rc: $rc \n";
		print "ERROR: Return code $rc from $defCmd.\n";
		$maxRC = max_rc ($rc, $maxRC);
	}
	else {		
		print "rc: $rc \n";
		print "Command was successful for $defCmd.\n";

		# Create the AFS component tree based on the definition
		print `$volCmd`;
		$rc = $? >> 8;
		if ($rc) {
			print "rc: $rc \n";
			print "ERROR: Return code $rc from $volCmd.\n";
			$maxRC = max_rc ($rc, $maxRC);
		}
		else {		
			print "rc: $rc \n";
			print "Command was successful for $volCmd.\n";
		}
	}
}
else {
	$rc = 8;
	print "ERROR: It was determined that there was not enough available AFS space on server $afs_server,\n";
	print "       partition $afs_partition, to create the AFS component tree.\n";
	print "       The AFS usage amount was $afs_usage.\n";
	$maxRC = max_rc ($rc, $maxRC);
}

log_execution ("end", "", $logPath, $logSuffix);
close (STDOUT);
exit ($maxRC);
